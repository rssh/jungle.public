<?xml version="1.0"?>
<project name="jabsorb disrtibution " default="build" basedir="."
    xmlns:ivy="antlib:fr.jayasoft.ivy.ant"
 >

 <property file="build.properties" />
 <property file="${jungle.public.home}/build.properties" />
 <property file="build.local.properties" />

 <property name="version" value="${global.version}-${local.version}" />

 <condition property="ivy.home" value="${env.IVY_HOME}" else="${user.home}/.ivy2" >
        <isset property="env.IVY_HOME" />
 </condition>
 <!--<property name="ivy.home" value="${user.home}/.ivy" />-->
 <property name="ivy.jar.dir" value="${ivy.home}/jars" />
 <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />
 <property name="jsch.install.version" value="0.1.37" />
 <property name="jsch.jar.file" value="${ivy.jar.dir}/jsch.jar" />

 <condition property="without.ivy.download" >
  <or>
    <and>
      <available file="${ivy.jar.file}" />
      <available file="${jsch.jar.file}" />
    </and>
    <isset property="offline.ivy" />
  </or>
 </condition>

 <target name="download-ivy" unless="without.ivy.download">
    <mkdir dir="${ivy.jar.dir}"/>
    <!-- download Ivy from web site so that it can be used even without any special installation -->
    <get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
         dest="${ivy.jar.file}" usetimestamp="true"/>
    <get src="http://prdownloads.sourceforge.net/jsch/jsch-0.1.37.jar?download"
         dest="${jsch.jar.file}" usetimestamp="true"/>
 </target>
	
 <target name="declare-ivy" depends="download-ivy" >
   <path id="ivy.lib.path">
      <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
   </path>
   <taskdef resource="fr/jayasoft/ivy/ant/antlib.xml"
            uri="antlib:fr.jayasoft.ivy.ant" 
            classpathref="ivy.lib.path"/>
 </target>


  <target name="clean-ivy" description="--> clean the ivy installation">
    <delete dir="${ivy.jar.dir}"/>
  </target>

 <target name="init-ivy" depends="declare-ivy">
  <ivy:resolve />
 </target>

 <target name="retrieve-src" depends="init-ivy">
  <ivy:retrieve pattern="origin.sources/[artifact]-[revision].[ext]" conf="std" />
 </target>

 <target name="unzip-src" depends="retrieve-src">
  <unzip src="origin.sources/jabsorb-src-1.3.1.zip" 
         dest="origin.sources" />
 </target>

 <target name="patch-src" depends="unzip-src">
  <patch patchfile="patches/patch.1" strip="0" />
  <!--
   // this is from previous release as example.
  <copy file="src.new/org/jabsorb/serializer/ClassHintTranslator.java"
        todir="origin.sources/jabsorb-1.3.1/src/new/org/jabsorb/serializer"
  />
  <copy file="src.new/org/jabsorb/serializer/ClassHintMapTranslator.java"
        todir="origin.sources/jabsorb-1.3.1/src/new/org/jabsorb/serializer"
  />
  -->
 </target>

 <target name="build" depends="patch-src">
  <ant dir="origin.sources/jabsorb-1.3.1"  /> 
 </target>

 <target name="clean">
  <delete>
    <fileset dir="origin.sources" includes="**/*.class" />
  </delete>
 </target>

 <target name="clean-all" depends="clean">
  <delete>
    <fileset dir="artifacts" includes="**/*.xml" />
    <fileset dir="artifacts" includes="**/*.jar" />
    <fileset dir="artifacts" includes="**/*.js" />
  </delete>
  <delete dir="origin.sources/jabsorb-${origin.version}" />
  <delete file="origin.sources/jabsorb-src-${origin.version}.zip" />
 </target>

 <target name="distributives" depends="build">
  <copy file="origin.sources/jabsorb-1.3.1/build/jabsorb-${version}.jar" 
       tofile="artifacts/jabsorb-${version}.jar" />
  <copy file="origin.sources/jabsorb-1.3.1/webapps/jsonrpc/jsonrpc.js" 
      tofile="artifacts/jsonrpc-${version}.js" />
  <copy file="origin.sources/jabsorb-1.3.1/webapps/jsonrpc/jsonrpc-min.js" 
      tofile="artifacts/jsonrpc-min-${version}.js" />
 </target>

   <target name="publish" depends="distributives">
     <ivy:publish resolver="datacenter.gradsoft.ua" 
                  pubrevision="${version}" 
                  overwrite="true" 
                  >
       <artifacts pattern="artifacts/[artifact]-[revision].[ext]" />
     </ivy:publish>
    </target>

   <target name="publish.local" depends="distributives">
     <ivy:publish resolver="jungle.repo" pubrevision="${version}" 
                  overwrite="true" 
                  >
       <artifacts pattern="artifacts/[artifact]-[revision].[ext]" />
     </ivy:publish>
    </target>


</project>
