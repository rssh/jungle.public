<?xml version="1.0"?>
<!-- build file for jungle.persistency.ritree project -->
<project name="jungle.persistence.ritree" default="build" basedir="."
  xmlns:ivy="antlib:fr.jayasoft.ivy.ant"
  xmlns:phpjao="antlib:ua.gradsoft.phpjao" 
 >
    <property file="build.properties" />
    <import file="build-ivy.xml" />
    
<!-- directories -->    
    <property name="src.dir" value="."/>
    <property name="build.dir" value="build"/>
    <property name="dist.dir" value="dist"/>
    <property name="lib.dir" value="lib"/>
    <property name="etc.dir" value="etc"/>

    <property name="src-common.dir" value="src/common"/>
    <property name="src-server-hibernate.dir" 
                                    value="src/server/hibernate-plugin"/>
    <property name="src-test-hibernate.dir" 
                                    value="src/test/hibernate-plugin"/>
    
    <property name="build-common.dir" value="${build.dir}/common"/>
    <property name="build-server.dir" value="${build.dir}/server"/>
    <property name="build-server-hibernate.dir" 
                             value="${build.dir}/server/hibernate-plugin"/>
    <property name="build-test.dir"  value="${build.dir}/test"/>
    <property name="build-test-hibernate.dir" 
                             value="${build.dir}/test/hibernate-plugin"/>
    
    <path id="core.classpath">
        <fileset dir="${lib.dir}"  includes="**/*.jar"/>
    </path>

    <!-- targets -->
    <target name="prepare">
        
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build-common.dir}"/>
        <mkdir dir="${build-server.dir}"/>
        <mkdir dir="${build-server-hibernate.dir}"/>
        <mkdir dir="${build-test.dir}"/>
        <mkdir dir="${build-test-hibernate.dir}"/>
        
        <mkdir dir="${dist.dir}"/>
    </target>
    
    <target name="clean">
        <!--
        <delete>
            <fileset dir="${build.dir}" includes="**/*.class" />
            <fileset dir="${dist.dir}" includes="**/*.ear,**/*.war,**/*.jar" />
        </delete>
        -->
        <delete dir="${build.dir}"/>
        <delete dir="${dist.dir}"/>
    </target>

    <target name="clean-all" depends="clean">
        <delete>
          <fileset dir="lib" includes="**/*.jar" />
        </delete>
    </target>
    
    <target name="build" depends="build-common, 
                                  build-server-hibernate,
                                  generate-php,
                                  build-gwt" >
    </target>
    
    <target name="build-common" depends="retrieve-libs,prepare" >
        <javac destdir="${build-common.dir}" 
                srcdir="${src-common.dir}" 
                includes="**/*.java" 
                deprecation="on" 
                debug="${debug}" >
            <!--<compilerarg  line="-Xlint:unchecked" />-->
            <classpath>
              <path refid="core.classpath"/>
            </classpath>
        </javac>
        <jar destfile="${dist.dir}/jungle.persistence.ritree-${version}.jar"
                basedir="${build-common.dir}" 
                includes="**/*.class,**/*.dtd,META-INF/**/*" 
                index="true">
            <include name="build"/>
            <manifest>
                <attribute name="Build-By" value="${user-name}"/>
            </manifest>
        </jar>
    </target>

    <target name="build-server-hibernate" depends="build-common" >
        <javac destdir="${build-server-hibernate.dir}" 
                srcdir="${src-server-hibernate.dir}" 
                includes="**/*.java" 
                deprecation="on" 
                debug="${debug}" >
            <!--<compilerarg  line="-Xlint:unchecked" />-->
            <classpath>
                <path refid="core.classpath"/>
                <pathelement location="${dist.dir}/jungle.persistence.ritree-${version}.jar" />
            </classpath>
        </javac>
        <jar destfile="${dist.dir}/jungle.persistence.ritree.hibernate-${version}.jar"
                basedir="${build-server-hibernate.dir}" 
                includes="**/*.class,**/*.dtd,META-INF/**/*" 
                index="true">
            <include name="build"/>
            <manifest>
                <attribute name="Build-By" value="${user-name}"/>
            </manifest>
        </jar>
    </target>


    <target name="build-test-hibernate" depends="build-server-hibernate" >
        <javac destdir="${build-test-hibernate.dir}" 
                srcdir="${src-test-hibernate.dir}" 
                includes="**/*.java" 
                deprecation="on" 
                debug="${debug}" >
            <!--<compilerarg  line="-Xlint:unchecked" />-->
            <classpath>
                <path refid="core.classpath"/>
                <pathelement location="${dist.dir}/jungle.persistence.ritree-${version}.jar" />
                <pathelement location="${dist.dir}/jungle.persistence.ritree-${version}.jar" />
            </classpath>
        </javac>
        <jar destfile="${dist.dir}/jungle.persistence.ritree.hibernate.test-${version}.jar"
                index="true">
            <include name="build"/>
            <manifest>
                <attribute name="Build-By" value="${user-name}"/>
            </manifest>
            <fileset dir="${build-test-hibernate.dir}"
                includes="**/*.class"  />
            <fileset dir="${src-test-hibernate.dir}"
                includes="META-INF/**/*"  />
        </jar>
    </target>

    <target name="build-test" depends="build-test-hibernate" />

    <target name="build-gwt" depends="build-common" >
      <jar destfile="${dist.dir}/jungle.persistence.ritree-gwt-${version}.jar"
                index="true">
            <fileset dir="${build-common.dir}" 
                     includes="**/*.class"/>
            <fileset dir="${src-common.dir}" 
                     includes="**/*.java"/>
            <fileset dir="etc/gwt" 
                     includes="**/*.xml"/>
      </jar>
    </target>

    <target name="generate-php" depends="declare-phpjao" >
       <phpjao:generate 
         outputFile="${basedir}/dist/jungle.persistence.ritree-${version}.php" 
         withoutRequireHeader="true"
       >
         <includedirs dir="${basedir}/src/common" />
         <includejars>
          <fileset  dir="lib" includes="*.jar" />
         </includejars>
         <class name="ua.gradsoft.jungle.persistence.ritree.RiInterval" />
         </phpjao:generate>
    </target>

    <target name="declare-phpjao" depends="retrieve-libs" >
      <path id="phpjao.lib.path" >
       <fileset dir="lib" includes="jungle.tools.phpjao-*.jar" />
       <fileset dir="lib" includes="TermWare-*.jar" />
       <fileset dir="lib" includes="TermWarePhp-*.jar" />
       <fileset dir="lib" includes="JavaChecker-*.jar" />
       <fileset dir="lib" includes="JavaChecker2Annotations-*.jar" />
       <fileset dir="lib" includes="TermWareJPP-*.jar" />
      </path>
      <taskdef resource="ua/gradsoft/phpjao/antlib.xml" 
               uri="antlib:ua.gradsoft.phpjao" 
               classpathref="phpjao.lib.path"/>
    </target>

   <target name="test" depends="test-pgsql-hibernate" />

   <target name="test-pgsql-hibernate" depends="build-test-hibernate" >
     <junit printsummary="yes" haltonfailure="yes" showoutput="yes"
            dir="${basedir}" >
       <classpath>
         <path refid="core.classpath"/>
         <pathelement location="${dist.dir}/jungle.persistence.ritree-${version}.jar" />
         <pathelement location="${dist.dir}/jungle.persistence.ritree.hibernate-${version}.jar" />
         <pathelement location="${dist.dir}/jungle.persistence.ritree.hibernate.test-${version}.jar" />
       </classpath>
       <formatter type="plain"/>
       <batchtest>
         <fileset dir="src/test/hibernate-plugin">
           <include name="**/*Test.java" />
           <exclude name="**/AllTests.java" />
         </fileset>
       </batchtest>
     </junit>
   </target>

   <target name="publish" depends="resolve-ivy,build">
     <ivy:publish resolver="datacenter.gradsoft.ua" 
                  pubrevision="${version}" 
                  overwrite="true" 
                  replacedynamicrev="false"
                  >
       <artifacts pattern="dist/[artifact]-[revision].[ext]" />
     </ivy:publish>
    </target>

   <target name="publish.local" depends="resolve-ivy,build">
     <ivy:publish resolver="local.repo" pubrevision="${version}" 
                  overwrite="true" 
                  replacedynamicrev="false"
                  >
       <artifacts pattern="dist/[artifact]-[revision].[ext]" />
     </ivy:publish>
    </target>


    <target name="docs" depends="" />
    
</project>
