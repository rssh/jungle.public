diff -udr origin.sources/jabsorb-1.3/src/org/jabsorb/JSONRPCBridge.java origin.sources.patched/jabsorb-1.3/src/org/jabsorb/JSONRPCBridge.java
--- origin.sources/jabsorb-1.3/src/org/jabsorb/JSONRPCBridge.java	2008-08-27 14:11:54.000000000 +0300
+++ origin.sources.patched/jabsorb-1.3/src/org/jabsorb/JSONRPCBridge.java	2008-12-30 19:23:51.000000000 +0200
@@ -45,6 +45,8 @@
 import org.jabsorb.reflect.ClassData;
 import org.jabsorb.serializer.AccessibleObjectResolver;
 import org.jabsorb.serializer.Serializer;
+import org.jabsorb.serializer.ClassHintTranslator;
+import org.jabsorb.serializer.ClassHintMapTranslator;
 import org.jabsorb.serializer.impl.ReferenceSerializer;
 import org.json.JSONArray;
 import org.json.JSONException;
@@ -903,6 +905,52 @@
   }
 
   /**
+   * Register a new class hint translator for marshalling.
+   *
+   * @param translator translator from internal to external class 
+   *    for marshalling.
+   **/
+  public void registerMarshallClassHintTranslator(ClassHintTranslator translator)
+  {
+     ser.registerMarshallClassHintTranslator(translator);
+  }
+
+  /**
+   * Register mapping between external and internal class during marshalling.
+   *
+   * @param internalClass -- classes on our side, which we want to pass.
+   * @param externalClass -- classes, which we want to receive.
+   **/
+  public void registerMarshallClassHint(Class internalClass, Class externalClass)
+  {
+     ser.getMarshallClassHintMapTranslator().put(internalClass,externalClass);
+  }
+
+
+  /**
+   * Register a new class hint translator for unmarshalling.
+   *
+   * @param translator translator from external to internal class 
+   *    for unmarshalling.
+   **/
+  public void registerUnmarshallClassHintTranslator(ClassHintTranslator translator)
+  {
+     ser.registerUnmarshallClassHintTranslator(translator);
+  }
+
+  /**
+   * Register mapping between internal and external class during unmarshalling.
+   *
+   * @param internalClass -- classes on our side, which we want to pass.
+   * @param externalClass -- classes, which we want to receive.
+   **/
+  public void registerUnmarshallClassHint(Class externalClass, Class internalClass)
+  {
+     ser.getUnmarshallClassHintMapTranslator().put(externalClass,internalClass);
+  }
+
+
+  /**
    * Set the CallbackController object for this bridge.
    * 
    * @param cbc the CallbackController object to be set for this bridge.
@@ -1420,4 +1468,4 @@
       throw new JSONException("unexpected exception");
     }
   }
-}
\ No newline at end of file
+}
diff -udr origin.sources/jabsorb-1.3/src/org/jabsorb/JSONSerializer.java origin.sources.patched/jabsorb-1.3/src/org/jabsorb/JSONSerializer.java
--- origin.sources/jabsorb-1.3/src/org/jabsorb/JSONSerializer.java	2008-08-27 14:11:54.000000000 +0300
+++ origin.sources.patched/jabsorb-1.3/src/org/jabsorb/JSONSerializer.java	2008-12-30 19:25:48.000000000 +0200
@@ -38,6 +38,8 @@
 import java.util.NoSuchElementException;
 import java.util.Set;
 
+import org.jabsorb.serializer.ClassHintMapTranslator;
+import org.jabsorb.serializer.ClassHintTranslator;
 import org.jabsorb.serializer.MarshallException;
 import org.jabsorb.serializer.ObjectMatch;
 import org.jabsorb.serializer.ProcessedObject;
@@ -74,7 +76,7 @@
   /**
    * Unique serialisation id.
    */
-  private final static long serialVersionUID = 2;
+  private final static long serialVersionUID = 3;
 
   /**
    * The logger for this class
@@ -98,6 +100,28 @@
   private List serializerList = new ArrayList();
 
   /**
+   * List for class hint translators for marshalling..
+   */
+  private List marshallClassHintTranslatorsList = new ArrayList();
+
+  /**
+   * Map class hint translator for marshalling.
+   */
+  private ClassHintMapTranslator marshallClassHintMapTranslator = new ClassHintMapTranslator();
+
+  /**
+   * List for class hint translator for unmarshalling.
+   */
+  private List unmarshallClassHintTranslatorsList = new ArrayList();
+
+  /**
+   * Map class hint
+   */
+  private ClassHintMapTranslator unmarshallClassHintMapTranslator = new ClassHintMapTranslator();
+
+
+
+  /**
    * Should serializers defined in this object include the fully qualified class
    * name of objects being serialized? This can be helpful when unmarshalling,
    * though if not needed can be left out in favor of increased performance and
@@ -384,12 +408,13 @@
       {
         log.debug("marshall class " + java.getClass().getName());
       }
-      Serializer s = getSerializer(java.getClass(), null);
+      Class classToMarshall = marshallClassHintTranslate(java.getClass());
+      Serializer s = getSerializer(classToMarshall, null);
       if (s != null)
       {
-        return s.marshall(state, parent, java);
+        return s.marshall(state, parent, java, classToMarshall);
       }
-      throw new MarshallException("can't marshall " + java.getClass().getName());
+      throw new MarshallException("can't marshall " + classToMarshall);
     }
     finally
     {
@@ -404,6 +429,8 @@
    *
    * TODO: Should this be thrown: This can only happen if there is an internal
    * problem with the code
+   *
+   * TODO: rename to init.
    */
   public void registerDefaultSerializers() throws Exception
   {
@@ -429,6 +456,9 @@
     registerSerializer(new NumberSerializer());
     registerSerializer(new BooleanSerializer());
     registerSerializer(new PrimitiveSerializer());
+
+    registerMarshallClassHintTranslator(marshallClassHintMapTranslator);
+    registerUnmarshallClassHintTranslator(unmarshallClassHintMapTranslator);
   }
 
   /**
@@ -479,6 +509,27 @@
     }
   }
 
+  public void registerMarshallClassHintTranslator(ClassHintTranslator translator)
+  {
+    marshallClassHintTranslatorsList.add(translator);  
+  }
+
+  public void registerUnmarshallClassHintTranslator(ClassHintTranslator translator)
+  {
+    unmarshallClassHintTranslatorsList.add(translator);
+  }
+
+  public ClassHintMapTranslator getMarshallClassHintMapTranslator()
+  {
+    return marshallClassHintMapTranslator;
+  }
+
+  public ClassHintMapTranslator getUnmarshallClassHintMapTranslator()
+  {
+    return unmarshallClassHintMapTranslator;
+  }
+
+
   /**
    * Should serializers defined in this object include the fully qualified class
    * name of objects being serialized? This can be helpful when unmarshalling,
@@ -602,6 +653,7 @@
       throw new UnmarshallException("can't assign null primitive");
 
     }
+    clazz = unmarshallClassHintTranslate(clazz);
     Serializer s = getSerializer(clazz, json.getClass());
     if (s != null)
     {
@@ -686,6 +738,7 @@
       throw new UnmarshallException("can't assign null primitive");
     }
     Class jsonClass = json.getClass();
+    clazz = unmarshallClassHintTranslate(clazz);
     Serializer s = getSerializer(clazz, jsonClass);
     if (s != null)
     {
@@ -781,6 +834,32 @@
     return o.getClass();
   }
 
+
+  private Class unmarshallClassHintTranslate(Class clazz)
+  {
+    return classHintTranslate(clazz, unmarshallClassHintTranslatorsList);
+  }
+
+
+  private Class marshallClassHintTranslate(Class clazz)
+  {
+    return classHintTranslate(clazz, marshallClassHintTranslatorsList);
+  }
+
+
+  private Class classHintTranslate(Class clazz, List translators)
+  {
+    Iterator it = translators.iterator();
+    while(it.hasNext()) {
+        ClassHintTranslator translator = (ClassHintTranslator)it.next();
+        Class translated = translator.translate(clazz);
+        if (translated!=null) {
+            return translated;
+        }
+    }
+    return clazz;
+  }
+
   /**
    * Find the serializer for the given Java type and/or JSON type.
    *
Only in origin.sources.patched/jabsorb-1.3/src/org/jabsorb/serializer: ClassHintMapTranslator.java
Only in origin.sources.patched/jabsorb-1.3/src/org/jabsorb/serializer: ClassHintTranslator.java
diff -udr origin.sources/jabsorb-1.3/src/org/jabsorb/serializer/impl/ArraySerializer.java origin.sources.patched/jabsorb-1.3/src/org/jabsorb/serializer/impl/ArraySerializer.java
--- origin.sources/jabsorb-1.3/src/org/jabsorb/serializer/impl/ArraySerializer.java	2008-08-27 14:11:54.000000000 +0300
+++ origin.sources.patched/jabsorb-1.3/src/org/jabsorb/serializer/impl/ArraySerializer.java	2008-12-30 17:23:56.000000000 +0200
@@ -222,7 +222,7 @@
     }
   }
 
-  public Object marshall(SerializerState state, Object p, Object o)
+  public Object marshall(SerializerState state, Object p, Object o, Class classHint)
       throws MarshallException
   {
     try
diff -udr origin.sources/jabsorb-1.3/src/org/jabsorb/serializer/impl/BeanSerializer.java origin.sources.patched/jabsorb-1.3/src/org/jabsorb/serializer/impl/BeanSerializer.java
--- origin.sources/jabsorb-1.3/src/org/jabsorb/serializer/impl/BeanSerializer.java	2008-08-27 14:11:54.000000000 +0300
+++ origin.sources.patched/jabsorb-1.3/src/org/jabsorb/serializer/impl/BeanSerializer.java	2008-12-30 17:46:03.000000000 +0200
@@ -179,17 +179,18 @@
     return _serializableClasses;
   }
 
-  public Object marshall(SerializerState state, Object p, Object o)
-      throws MarshallException
+
+  public Object marshall(SerializerState state, Object p, Object o, Class classHint)
+          throws MarshallException
   {
     BeanData bd;
     try
     {
-      bd = getBeanData(o.getClass());
+      bd = getBeanData(classHint);
     }
     catch (IntrospectionException e)
     {
-      throw new MarshallException(o.getClass().getName() +
+      throw new MarshallException(classHint.getName() +
         " is not a bean", e);
     }
 
@@ -198,7 +199,7 @@
     {
       try
       {
-        val.put("javaClass", o.getClass().getName());
+        val.put("javaClass", classHint.getName());
       }
       catch (JSONException e)
       {
@@ -228,7 +229,7 @@
         {
           e = ((InvocationTargetException) e).getTargetException();
         }
-        throw new MarshallException("bean " + o.getClass().getName()
+        throw new MarshallException("bean " + classHint.getName()
             + " can't invoke " + getMethod.getName() + ": " + e.getMessage(), e);
       }
       try
@@ -255,7 +256,7 @@
       }
       catch (MarshallException e)
       {
-        throw new MarshallException("bean " + o.getClass().getName() + " "
+        throw new MarshallException("bean " + classHint.getName() + " "
             + e.getMessage(), e);
       }
     }
diff -udr origin.sources/jabsorb-1.3/src/org/jabsorb/serializer/impl/BooleanSerializer.java origin.sources.patched/jabsorb-1.3/src/org/jabsorb/serializer/impl/BooleanSerializer.java
--- origin.sources/jabsorb-1.3/src/org/jabsorb/serializer/impl/BooleanSerializer.java	2008-08-27 14:11:54.000000000 +0300
+++ origin.sources.patched/jabsorb-1.3/src/org/jabsorb/serializer/impl/BooleanSerializer.java	2008-12-30 17:24:47.000000000 +0200
@@ -64,7 +64,7 @@
     return _serializableClasses;
   }
 
-  public Object marshall(SerializerState state, Object p, Object o)
+  public Object marshall(SerializerState state, Object p, Object o, Class classHint)
       throws MarshallException
   {
     return o;
diff -udr origin.sources/jabsorb-1.3/src/org/jabsorb/serializer/impl/DateSerializer.java origin.sources.patched/jabsorb-1.3/src/org/jabsorb/serializer/impl/DateSerializer.java
--- origin.sources/jabsorb-1.3/src/org/jabsorb/serializer/impl/DateSerializer.java	2008-08-27 14:11:54.000000000 +0300
+++ origin.sources.patched/jabsorb-1.3/src/org/jabsorb/serializer/impl/DateSerializer.java	2008-12-30 17:25:29.000000000 +0200
@@ -68,7 +68,7 @@
     return _serializableClasses;
   }
 
-  public Object marshall(SerializerState state, Object p, Object o)
+  public Object marshall(SerializerState state, Object p, Object o, Class classHint)
       throws MarshallException
   {
     long time;
diff -udr origin.sources/jabsorb-1.3/src/org/jabsorb/serializer/impl/DictionarySerializer.java origin.sources.patched/jabsorb-1.3/src/org/jabsorb/serializer/impl/DictionarySerializer.java
--- origin.sources/jabsorb-1.3/src/org/jabsorb/serializer/impl/DictionarySerializer.java	2008-08-27 14:11:54.000000000 +0300
+++ origin.sources.patched/jabsorb-1.3/src/org/jabsorb/serializer/impl/DictionarySerializer.java	2008-12-30 17:46:03.000000000 +0200
@@ -78,7 +78,7 @@
     return _serializableClasses;
   }
 
-  public Object marshall(SerializerState state, Object p, Object o)
+  public Object marshall(SerializerState state, Object p, Object o, Class classHint)
       throws MarshallException
   {
     Dictionary ht = (Dictionary) o;
@@ -89,7 +89,7 @@
     {
       if (ser.getMarshallClassHints())
       {
-        obj.put("javaClass", o.getClass().getName());
+        obj.put("javaClass", classHint);
       }
       obj.put("map", mapdata);
       state.push(o,mapdata,"map");
diff -udr origin.sources/jabsorb-1.3/src/org/jabsorb/serializer/impl/ListSerializer.java origin.sources.patched/jabsorb-1.3/src/org/jabsorb/serializer/impl/ListSerializer.java
--- origin.sources/jabsorb-1.3/src/org/jabsorb/serializer/impl/ListSerializer.java	2008-08-27 14:11:54.000000000 +0300
+++ origin.sources.patched/jabsorb-1.3/src/org/jabsorb/serializer/impl/ListSerializer.java	2008-12-30 17:46:03.000000000 +0200
@@ -42,6 +42,9 @@
 import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 
 /**
  * Serialises lists
@@ -67,6 +70,14 @@
    */
   private static Class[] _JSONClasses = new Class[] { JSONObject.class };
 
+ /**
+  *  The logger for this class
+  **/
+  private final static Logger log = LoggerFactory
+      .getLogger(ListSerializer.class);
+
+
+
   public boolean canSerialize(Class clazz, Class jsonClazz)
   {
     return (super.canSerialize(clazz, jsonClazz) || ((jsonClazz == null || jsonClazz == JSONObject.class) && List.class
@@ -83,7 +94,7 @@
     return _serializableClasses;
   }
 
-  public Object marshall(SerializerState state, Object p, Object o)
+  public Object marshall(SerializerState state, Object p, Object o, Class classHint)
       throws MarshallException
   {
     List list = (List) o;
@@ -96,7 +107,7 @@
     {
       try
       {
-        obj.put("javaClass", o.getClass().getName());
+        obj.put("javaClass", classHint.getName());
       }
       catch (JSONException e)
       {
@@ -110,6 +121,9 @@
     }
     catch (JSONException e)
     {
+      if (log.isDebugEnabled()) {
+        log.debug("marshall exception:",e);
+      }
       throw new MarshallException("Error setting list: " + e, e);
     }
     int index = 0;
@@ -133,6 +147,9 @@
     }
     catch (MarshallException e)
     {
+      if (log.isDebugEnabled()) {
+        log.debug("marshall exception:",e);
+      }
       throw new MarshallException("element " + index, e);
     }
     finally
Only in origin.sources/jabsorb-1.3/src/org/jabsorb/serializer/impl: ListSerializer.java.orig
Only in origin.sources/jabsorb-1.3/src/org/jabsorb/serializer/impl: ListSerializer.java.rej
diff -udr origin.sources/jabsorb-1.3/src/org/jabsorb/serializer/impl/MapSerializer.java origin.sources.patched/jabsorb-1.3/src/org/jabsorb/serializer/impl/MapSerializer.java
--- origin.sources/jabsorb-1.3/src/org/jabsorb/serializer/impl/MapSerializer.java	2008-08-27 14:11:54.000000000 +0300
+++ origin.sources.patched/jabsorb-1.3/src/org/jabsorb/serializer/impl/MapSerializer.java	2008-12-30 17:46:03.000000000 +0200
@@ -82,7 +82,7 @@
     return _serializableClasses;
   }
 
-  public Object marshall(SerializerState state, Object p, Object o)
+  public Object marshall(SerializerState state, Object p, Object o, Class classHint)
       throws MarshallException
   {
     Map map = (Map) o;
@@ -92,7 +92,7 @@
     {
       try
       {
-        obj.put("javaClass", o.getClass().getName());
+        obj.put("javaClass", classHint);
       }
       catch (JSONException e)
       {
diff -udr origin.sources/jabsorb-1.3/src/org/jabsorb/serializer/impl/NumberSerializer.java origin.sources.patched/jabsorb-1.3/src/org/jabsorb/serializer/impl/NumberSerializer.java
--- origin.sources/jabsorb-1.3/src/org/jabsorb/serializer/impl/NumberSerializer.java	2008-08-27 14:11:54.000000000 +0300
+++ origin.sources.patched/jabsorb-1.3/src/org/jabsorb/serializer/impl/NumberSerializer.java	2008-12-30 17:27:15.000000000 +0200
@@ -176,7 +176,7 @@
     }
   }
 
-  public Object marshall(SerializerState state, Object p, Object o)
+  public Object marshall(SerializerState state, Object p, Object o, Class classHint)
       throws MarshallException
   {
     return o;
diff -udr origin.sources/jabsorb-1.3/src/org/jabsorb/serializer/impl/PrimitiveSerializer.java origin.sources.patched/jabsorb-1.3/src/org/jabsorb/serializer/impl/PrimitiveSerializer.java
--- origin.sources/jabsorb-1.3/src/org/jabsorb/serializer/impl/PrimitiveSerializer.java	2008-08-27 14:11:54.000000000 +0300
+++ origin.sources.patched/jabsorb-1.3/src/org/jabsorb/serializer/impl/PrimitiveSerializer.java	2008-12-30 17:27:49.000000000 +0200
@@ -206,7 +206,7 @@
     }
   }
 
-  public Object marshall(SerializerState state, Object p, Object o)
+  public Object marshall(SerializerState state, Object p, Object o, Class classHint)
       throws MarshallException
   {
     return o;
diff -udr origin.sources/jabsorb-1.3/src/org/jabsorb/serializer/impl/RawJSONArraySerializer.java origin.sources.patched/jabsorb-1.3/src/org/jabsorb/serializer/impl/RawJSONArraySerializer.java
--- origin.sources/jabsorb-1.3/src/org/jabsorb/serializer/impl/RawJSONArraySerializer.java	2008-08-27 14:11:54.000000000 +0300
+++ origin.sources.patched/jabsorb-1.3/src/org/jabsorb/serializer/impl/RawJSONArraySerializer.java	2008-12-30 17:29:20.000000000 +0200
@@ -66,7 +66,7 @@
     return _serializableClasses;
   }
 
-  public Object marshall(SerializerState state, Object p, Object o)
+  public Object marshall(SerializerState state, Object p, Object o, Class classHint)
       throws MarshallException
   {
     // reprocess the raw json in order to fixup circular references and duplicates
diff -udr origin.sources/jabsorb-1.3/src/org/jabsorb/serializer/impl/RawJSONObjectSerializer.java origin.sources.patched/jabsorb-1.3/src/org/jabsorb/serializer/impl/RawJSONObjectSerializer.java
--- origin.sources/jabsorb-1.3/src/org/jabsorb/serializer/impl/RawJSONObjectSerializer.java	2008-08-27 14:11:54.000000000 +0300
+++ origin.sources.patched/jabsorb-1.3/src/org/jabsorb/serializer/impl/RawJSONObjectSerializer.java	2008-12-30 17:30:07.000000000 +0200
@@ -67,7 +67,7 @@
     return _serializableClasses;
   }
 
-  public Object marshall(SerializerState state, Object p, Object o)
+  public Object marshall(SerializerState state, Object p, Object o, Class classHint)
       throws MarshallException
   {
     // reprocess the raw json in order to fixup circular references and duplicates
diff -udr origin.sources/jabsorb-1.3/src/org/jabsorb/serializer/impl/ReferenceSerializer.java origin.sources.patched/jabsorb-1.3/src/org/jabsorb/serializer/impl/ReferenceSerializer.java
--- origin.sources/jabsorb-1.3/src/org/jabsorb/serializer/impl/ReferenceSerializer.java	2008-08-27 14:11:54.000000000 +0300
+++ origin.sources.patched/jabsorb-1.3/src/org/jabsorb/serializer/impl/ReferenceSerializer.java	2008-12-30 17:37:37.000000000 +0200
@@ -97,24 +97,23 @@
     return _serializableClasses;
   }
 
-  public Object marshall(SerializerState state, Object p, Object o)
+  public Object marshall(SerializerState state, Object p, Object o, Class classHint)
       throws MarshallException
-  {
-    Class clazz = o.getClass();
+  { 
     Integer identity = new Integer(System.identityHashCode(o));
-    if (bridge.isReference(clazz))
+    if (bridge.isReference(classHint))
     {
       if (log.isDebugEnabled())
       {
         log.debug("marshalling reference to object " + identity + " of class "
-            + clazz.getName());
+            + classHint.getName());
       }
       bridge.addReference(o);
       JSONObject jso = new JSONObject();
       try
       {
         jso.put("JSONRPCType", "Reference");
-        jso.put("javaClass", clazz.getName());
+        jso.put("javaClass", classHint.getName());
         jso.put("objectID", identity);
       }
       catch (JSONException e)
@@ -123,12 +122,12 @@
       }
       return jso;
     }
-    else if (bridge.isCallableReference(clazz))
+    else if (bridge.isCallableReference(classHint))
     {
       if (log.isDebugEnabled())
       {
         log.debug("marshalling callable reference to object " + identity
-            + " of class " + clazz.getName());
+            + " of class " + classHint.getName());
       }
       bridge.registerObject(identity, o);
       bridge.addReference(o);
@@ -137,7 +136,7 @@
       try
       {
         jso.put("JSONRPCType", "CallableReference");
-        jso.put("javaClass", clazz.getName());
+        jso.put("javaClass", classHint.getName());
         jso.put("objectID", identity);
       }
       catch (JSONException e)
diff -udr origin.sources/jabsorb-1.3/src/org/jabsorb/serializer/impl/SetSerializer.java origin.sources.patched/jabsorb-1.3/src/org/jabsorb/serializer/impl/SetSerializer.java
--- origin.sources/jabsorb-1.3/src/org/jabsorb/serializer/impl/SetSerializer.java	2008-08-27 14:11:54.000000000 +0300
+++ origin.sources.patched/jabsorb-1.3/src/org/jabsorb/serializer/impl/SetSerializer.java	2008-12-30 17:38:33.000000000 +0200
@@ -82,7 +82,7 @@
     return _serializableClasses;
   }
 
-  public Object marshall(SerializerState state, Object p, Object o)
+  public Object marshall(SerializerState state, Object p, Object o, Class classHint)
       throws MarshallException
   {
     Set set = (Set) o;
@@ -93,7 +93,7 @@
     {
       try
       {
-        obj.put("javaClass", o.getClass().getName());
+        obj.put("javaClass", classHint.getName());
       }
       catch (JSONException e)
       {
diff -udr origin.sources/jabsorb-1.3/src/org/jabsorb/serializer/impl/StringSerializer.java origin.sources.patched/jabsorb-1.3/src/org/jabsorb/serializer/impl/StringSerializer.java
--- origin.sources/jabsorb-1.3/src/org/jabsorb/serializer/impl/StringSerializer.java	2008-08-27 14:11:54.000000000 +0300
+++ origin.sources.patched/jabsorb-1.3/src/org/jabsorb/serializer/impl/StringSerializer.java	2008-12-30 17:39:33.000000000 +0200
@@ -64,7 +64,7 @@
     return _serializableClasses;
   }
 
-  public Object marshall(SerializerState state, Object p, Object o)
+  public Object marshall(SerializerState state, Object p, Object o, Class classHint)
       throws MarshallException
   {
     if (o instanceof Character)
diff -udr origin.sources/jabsorb-1.3/src/org/jabsorb/serializer/Serializer.java origin.sources.patched/jabsorb-1.3/src/org/jabsorb/serializer/Serializer.java
--- origin.sources/jabsorb-1.3/src/org/jabsorb/serializer/Serializer.java	2008-08-27 14:11:54.000000000 +0300
+++ origin.sources.patched/jabsorb-1.3/src/org/jabsorb/serializer/Serializer.java	2008-12-30 16:59:50.000000000 +0200
@@ -78,7 +78,7 @@
    *         of the java object that was marshalled.
    * @throws MarshallException if there is a problem marshalling java to json.
    */
-  public Object marshall(SerializerState state, Object p, Object o)
+  public Object marshall(SerializerState state, Object p, Object o, Class classHint)
       throws MarshallException;
 
   /**
Only in origin.sources.patched/jabsorb-1.3/webapps/jsonrpc/WEB-INF: classes
Only in origin.sources.patched/jabsorb-1.3/webapps/jsonrpc/WEB-INF: lib
