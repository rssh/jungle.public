<?xml version="1.0"?>
<!-- build file for Jungle caching project -->
<project name="jungle.caching" default="build" basedir="."
    xmlns:ivy="antlib:fr.jayasoft.ivy.ant"
 >

 <property file="build.properties" />
 <property file="build.local.properties" />

 <property name="ivy.install.version" value="2.0.0" />
 <condition property="ivy.home" value="${env.IVY_HOME}" else="${user.home}/.ivy2">
        <isset property="env.IVY_HOME" />
 </condition>
 <!--<property name="ivy.home" value="${user.home}/.ivy" />-->
 <property name="ivy.jar.dir" value="${ivy.home}/jars" />
 <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />
 <property name="jsch.jar.file" value="${ivy.jar.dir}/jsch.jar" />
	
 <condition property="without.ivy.download" >
  <or>
    <and>
      <available file="${ivy.jar.file}" />
      <available file="${jsch.jar.file}" />
    </and>
    <isset property="offline.ivy" />
  </or>
 </condition>

 <target name="download-ivy" unless="without.ivy.download">
    <mkdir dir="${ivy.jar.dir}"/>
    <!-- download Ivy from web site so that it can be used even without any special installation -->
    <get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
         dest="${ivy.jar.file}" usetimestamp="true"/>
    <get src="http://prdownloads.sourceforge.net/jsch/jsch-0.1.37.jar?download"
         dest="${jsch.jar.file}" usetimestamp="true"/>
 </target>
	
 <target name="declare-ivy" depends="download-ivy" >
   <path id="ivy.lib.path">
      <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
   </path>
   <taskdef resource="fr/jayasoft/ivy/ant/antlib.xml"
            uri="antlib:fr.jayasoft.ivy.ant" 
            classpathref="ivy.lib.path"/>
 </target>


  <target name="clean-ivy" description="--> clean the ivy installation">
    <delete dir="${ivy.jar.dir}"/>
  </target>

 <target name="init-ivy" depends="declare-ivy" unless="offline">
  <ivy:resolve />
 </target>

 <target name="retrieve-libs" depends="init-ivy" unless="offline">
  <ivy:retrieve pattern="lib/[artifact]-[revision].[ext]" conf="default" />
  <ivy:artifactproperty name="[module].version" conf="default"
                        value="[revision]" />
 </target>

 <target name="retrieve-test-libs" depends="declare-ivy" unless="offline" >
  <ivy:retrieve pattern="lib/[artifact]-[revision].[ext]" 
                conf="test" />
  <ivy:artifactproperty name="[module].version" conf="test"
                        value="[revision]" />
 </target>

 <!--
   ( does not work )
 <target name="declare-schemagen" >
  <taskdef name="schemagen" classname="com.sun.tools.jxc.SchemaGenTask" >
   <classpath path="${java.class.path}" />
  </taskdef>
 </target>
 -->

 <path id="std.build.path">
   <fileset dir="lib" includes="commons-logging-*.jar" />
   <fileset dir="lib" includes="ehcache-*.jar" /> 
 </path>

 <path id="test.std.build.path">
   <path refid="std.build.path" />
   <fileset dir="lib" includes="junit-*.jar" /> 
   <pathelement location="src/main/java"/>
   <pathelement location="src/test/java"/>
   <pathelement location="src/test/resources"/>
 </path>

 <path id="test.std.run.path">
   <path refid="test.std.build.path" />
   <fileset dir="lib" includes="junit-*.jar" />  
   <pathelement location="target/jungle.caching-${version}.jar"/>
 </path>
 

 <target name="generate-schema" depends="build-classes" >
  <!--
    <schemagen srcdir="src/main/java" destdir="build/schemas" />
  -->
  <exec executable="schemagen"> 
    <arg value="-d" />
    <arg value="build/schemas" />
    <arg value="-cp" />
    <arg value="src/main/java" />
    <arg value="src/main/java/ua/gradsoft/caching/XmlClassCachingPolicyDescription.java" />
    <arg value="src/main/java/ua/gradsoft/caching/XmlClassCachingPolicies.java" />
  </exec>
 </target>

 <target name="build-classes" depends="retrieve-libs">
  <javac srcdir="src/main/java" includes="**/*.java" deprecation="on" 
         debug="${debug}" >
    <classpath  refid="std.build.path" />
  </javac>
 </target>

 <target name="build" depends="build-classes,generate-schema">
  <jar basedir="src/main/java" includes="**/*.class,**/*.index" 
       destfile="target/jungle.caching-${version}.jar" 
       index="true">
  <include name="build"/>
  <manifest>
   <attribute name="Build-By" value="${user-name}"/>
  </manifest>
  </jar>
 </target>

 <target name="clean">
  <delete>
    <fileset dir="src" includes="**/*.class" />
    <fileset dir="build" includes="**/*.class" />
  </delete>
 </target>

 <target name="build-tests" depends="build,retrieve-test-libs">
  <javac srcdir="src/test/java" includes="**/*.java" deprecation="on" 
         debug="${debug}" >
    <classpath refid="test.std.build.path" />
  </javac>
 </target>

 <target name="test" depends="build-tests">
  <echo message="basedir=${basedir}" />
  <junit printsummary="yes" haltonfailure="yes" showoutput="yes" 
         fork="yes" dir="${basedir}">
  <classpath refid="test.std.run.path" />
  <sysproperty key="basedir" value="${basedir}"/>

  <formatter type="plain"/>

  <batchtest>
    <fileset dir="src/test/java">
      <include name="**/*Test.java"/>
      <exclude name="**/AllTests.java"/>
    </fileset>
  </batchtest>
  </junit>
 </target>

 <target name="api-docs">
  <javadoc destdir="docs/api" >
   <packageset dir="src/main/java" />
   <classpath  refid="std.build.path" />
  </javadoc>
 </target>

 
 <target name="docs" depends="api-docs">
 </target>

 <target name="source-distributive" depends="build,docs">
  <mkdir dir="target/jungle.caching-src-${version}" />
  <copy todir="target/jungle.caching-src-${version}" >
   <fileset dir=".">
    <include name="**/*.xml" />
    <include name="**/*.java" />
    <include name="**/*.properties" />
    <include name="src/*" />
    <include name="lib/*" />
    <include name="docs/**/*" />
    <exclude name="target/*.jar" />
    <exclude name="target/*.tar.gz" />
    <exclude name="target/jungle.caching*/*" />
    <include name="target/README" />
    <exclude name="nbproject/private/*" />
    <exclude name="**/*.class" />
   </fileset>
  </copy>
  <tar basedir="target" 
       destfile="target/jungle.caching-src-${version}.tar"
       defaultexcludes="yes"
       includes="jungle.caching-src-${version}/**/*" />
  <gzip src="target/jungle.caching-src-${version}.tar"
        destfile="target/jungle.caching-src-${version}.tar.gz"
  />
  <delete file="target/jungle.caching-src-${version}.tar" />
  <delete dir="target/jungle.caching-src-${version}" />
 </target>
 <target name="doc-distributive" depends="docs">
  <mkdir dir="target/jungle.caching-doc-${version}" />
  <copy todir="target/jungle.caching-doc-${version}" >
   <fileset dir=".">
    <include name="docs/**/*" />
   </fileset>
  </copy>
  <tar basedir="target" 
       destfile="target/jungle.caching-doc-${version}.tar"
       defaultexcludes="yes"
       includes="jungle.caching-doc-${version}/**/*" />
  <gzip src="target/jungle.caching-doc-${version}.tar"
        destfile="target/jungle.caching-doc-${version}.tar.gz"
  />
  <delete file="target/jungle.caching-doc-${version}.tar" />
  <delete dir="target/jungle.caching-doc-${version}" />
 </target>


  <target name="distributives" 
          depends="build,source-distributive,doc-distributive" />

   <target name="publish" depends="distributives">
     <ivy:publish resolver="datacenter.gradsoft.ua" pubrevision="${version}" 
                  overwrite="true" 
                  replacedynamicrev="false"
                  >
       <artifacts pattern="target/[artifact]-[revision].[ext]" />
     </ivy:publish>
    </target>

   <target name="publish.local" depends="distributives">
     <ivy:publish resolver="jungle.repo" pubrevision="${version}" 
                  overwrite="true" 
                  replacedynamicrev="false"
                  >
       <artifacts pattern="target/[artifact]-[revision].[ext]" />
     </ivy:publish>
    </target>


</project>
