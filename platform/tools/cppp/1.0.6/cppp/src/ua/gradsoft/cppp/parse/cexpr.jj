options
{
 static=false;
}
PARSER_BEGIN(CEXPRParser)

package ua.gradsoft.cppp.parse;

import java.io.*;
import java.util.*;
import ua.gradsoft.termware.*;
import ua.gradsoft.cppp.utils.*;

/**
 * parser for constant expressions in CPPP
 *<pre>
 *@checker:disable(All)
 *</pre>
 */
public class CEXPRParser
{


 public static void main(String[] args)
 {
  try {
    CEXPRParser parser = new CEXPRParser(System.in);    
    boolean quit=false;
    while(!quit) {
     Term expr=parser.line();
     expr.print(System.out);
     quit=(expr.isAtom() && expr.getName().equals("quit"));
    }
  }catch(TermWareException ex){
    System.err.println(ex.getMessage());
  }catch(ParseException ex){
    System.err.println(ex.getMessage());
  }  
 }

 public Term lineWrapped() throws TermWareException
 {
   try {
     return line();
   }catch(ParseException ex){
     throw new TermWareParseException(ex.getMessage(),ex);
   }
 }

 public boolean eof()
 {
  return eof_;
 }

 private Term  cons(Term t1, Term t2) throws TermWareException
 {
  return TermWare.getInstance().getTermFactory().createTerm("cons",t1,t2);
 }

 private Term  cons(String s1, Term t2) throws TermWareException
 {
  return cons(TermWare.getInstance().getTermFactory().createString(s1),t2);
 }

 private Term  cons(Term t1, String s2) throws TermWareException
 {
  return cons(t1,TermWare.getInstance().getTermFactory().createString(s2));
 }

 private boolean eof_=false;


}

PARSER_END(CEXPRParser)


Term line() throws TermWareException :
{
 Term t;
}
{
 t=constant_expression()  (<NEWLINE>|(<EOF> { eof_=true; } ))
  { return t; }
 |
 <NEWLINE>
  { return TermWare.getInstance().getTermFactory().createNIL(); }
 |
 <EOF>
  { eof_=true; return TermWare.getInstance().getTermFactory().createNIL(); }
}

Term constant_expression() throws TermWareException :
{
 Term t;
}
{
 t=or_constant_expression()
  { return t; }
}

Term or_constant_expression() throws TermWareException :
{
 Term t1=null;
 Term t2=null;
}
{
 t1=and_constant_expression() ( 
                ( <LOGICAL_OR> t2=or_constant_expression())
                              )?
  { if (t2==null) return t1;
    return TermWare.getInstance().getTermFactory().createTerm("logical_or",t1,t2); 
  }                        
}


Term  and_constant_expression() throws TermWareException :
{
 Term t1=null;
 Term t2=null;
}
{
 t1=bit_or_constant_expression() ( 
                 ( <LOGICAL_AND> t2=and_constant_expression())
                              )?
  { if (t2==null) return t1;
    return TermWare.getInstance().getTermFactory().createTerm("logical_and",t1,t2); 
  }                        
}

Term  bit_or_constant_expression() throws TermWareException :
{
 Term t1=null;
 Term t2=null;
}
{
 t1=bit_and_constant_expression() (LOOKAHEAD(2) 
                ( <BIT_OR> t2=bit_or_constant_expression())
                              )?
  { if (t2==null) return t1;
    return TermWare.getInstance().getTermFactory().createTerm("bit_or",t1,t2); 
  }                        
}


Term  bit_and_constant_expression() throws TermWareException :
{
 Term t1=null;
 Term t2=null;
}
{
 t1=eq_constant_expression() ( LOOKAHEAD(2)
                ( <BIT_AND> t2=bit_and_constant_expression())
                             )?
  { if (t2==null) return t1;
    return TermWare.getInstance().getTermFactory().createTerm("bit_and",t1,t2); 
  }                        
}

Term  eq_constant_expression() throws TermWareException :
{
 Term t1=null;
 Term t2=null;
 boolean eq=false;
}
{
 t1=compare_constant_expression() 
              (
               (
                (<EQ> {eq=true;} t2=bit_and_constant_expression())
               |
                (<NEQ> t2=eq_constant_expression())
               ))?
  { if (t2==null) return t1;
    if (eq) {
      return TermWare.getInstance().getTermFactory().createTerm("eq",t1,t2);
    }else{
      return TermWare.getInstance().getTermFactory().createTerm("neq",t1,t2); 
    }
  }                        
}

Term  compare_constant_expression() throws TermWareException :
{
 Term t1=null;
 Term t2=null;
 Token ct=null;
}
{
 t1=shift_constant_expression()( ( 
                (ct=<LESS> t2=compare_constant_expression())
               |
                (ct=<GREATER> t2=compare_constant_expression())
               |
                (ct=<LESS_EQ> t2=compare_constant_expression())
               |
                (ct=<GREATER_EQ> t2=compare_constant_expression())
                            )  )?
  { if (t2==null) return t1;
    if (ct.image.equals("<")) {
      return TermWare.getInstance().getTermFactory().createTerm("less",t1,t2);
    }else if(ct.image.equals(">")) {
      return TermWare.getInstance().getTermFactory().createTerm("greater",t1,t2); 
    }else if(ct.image.equals("<=")) {
      return TermWare.getInstance().getTermFactory().createTerm("less_eq",t1,t2);
    }else if(ct.image.equals(">=")) {
      return TermWare.getInstance().getTermFactory().createTerm("greater_eq",t1,t2);
    }else{
      // impossible
      return TermWare.getInstance().getTermFactory().createTerm("unknown",t1,t2);
    }
  }                        
}

Term  shift_constant_expression() throws TermWareException :
{
 Term t1=null;
 Term t2=null;
 Term t3=null;
 Token t;
 String op;
}
{
 t1=additive_constant_expression() ( 
          (
             (
                ( t=<LEFT_SHIFT> t2=additive_constant_expression())
                |
              
                ( t=<RIGHT_SHIFT> t2=additive_constant_expression())
             )
              {
                if (t.kind==LEFT_SHIFT) op="left_shif"; else op="right_shift";
                if (t3==null) {
                  t3=TermWare.getInstance().getTermFactory().createTerm(op,t2);
                }else{
                  t3=TermWare.getInstance().getTermFactory().createTerm(t3.getName(),
                                   TermWare.getInstance().getTermFactory().createTerm(op,t3.getSubtermAt(0),t2));
                }
              }
           )    )*
  { if (t2==null) return t1;
    return TermWare.getInstance().getTermFactory().createTerm(t3.getName(),t1,t3.getSubtermAt(0));
  }                        
}

Term  additive_constant_expression() throws TermWareException :
{
 Term t1=null;
 Term t2=null;
 Term t3=null;
 Token t;
 String op;
}
{
 t1=multiplicative_constant_expression() (
          (
             (
                ( t=<PLUS> t2=additive_constant_expression())
                |
                ( t=<MINUS> t2=additive_constant_expression())
             )
              {
                if (t.kind==PLUS) op="plus"; else op="minus";
                if (t3==null) {
                  t3=TermWare.getInstance().getTermFactory().createTerm(op,t2);
                }else{
                  t3=TermWare.getInstance().getTermFactory().createTerm(t3.getName(),t2);
                }
              }
           )    )?
  { if (t2==null) return t1;
    return TermWare.getInstance().getTermFactory().createTerm(t3.getName(),t1,t3.getSubtermAt(0));
  }                        
}


Term  multiplicative_constant_expression() throws TermWareException :
{
 Term t1=null;
 Term t2=null;
 Term t3=null;
 Token t;
 String op;
}
{
 t1=unary_constant_expression() ( 
          (
             (
                (t=<MULTIPLY>  t2=multiplicative_constant_expression())
                |
                (t=<DIVIDE> t2=multiplicative_constant_expression())
                |
                (t=<MOD> t2=multiplicative_constant_expression())
             )
              {
                if (t.kind==MULTIPLY) op="multiply"; 
                else if (t.kind==DIVIDE) op="divide";
                else op="mod";
                if (t3==null) {
                  t3=TermWare.getInstance().getTermFactory().createTerm(op,t2);
                }else{
                  t3=TermWare.getInstance().getTermFactory().createTerm(t3.getName(),t2);
                }
              }
           )    )?
  { if (t2==null) return t1;
    return TermWare.getInstance().getTermFactory().createTerm(t3.getName(),t1,t3.getSubtermAt(0));
  }                        
}


Term unary_constant_expression() throws TermWareException:
{
 Term t=null;
 String s=null;
}
{
 [s=unary_operation() ] t=last_constant_expression()
 {
  if (s==null) return t;
  else {
   return TermWare.getInstance().getTermFactory().createTerm(s,t); 
  }
 }
}

String unary_operation() :
{
}
{
   <PLUS> 
  { return "plus"; }
 |
   <MINUS> 
  { return "minus"; }
 |
   <BIT_NEGATE> 
  { return "bit_negate"; }
 |
  <LOGICAL_NOT> 
  { return "logical_not"; }
}

Term  last_constant_expression() throws TermWareException :
{
 Term t;
 Term t1;               
}
{
 t=number()
  { 
    return t;
  }
 |
 "(" t=constant_expression() ")"
   { return t; }
 |
 LOOKAHEAD(2)
 t=identifier() "(" t1=constant_expression_list()  ")"
  { return TermWare.getInstance().getTermFactory().createTerm("call",t,t1); }
 |
 t=identifier()
  { return t; }             
 |
 "defined" "(" t=identifier() ")"
  { return TermWare.getInstance().getTermFactory().createTerm("defined",t); }
}

Term  constant_expression_list() throws TermWareException :
{
 Term t1=null;
 Term t2=null;
 Term t3=null;
}
{
 t1=constant_expression() (
                           "," t2=constant_expression() 
                           {
                            if (t3==null) t3=t2;
                            else t3=cons(t3,t2);
                           }
                          )*
 {
   if (t2==null) return t1;
   else return cons(t3,t2);
 }
}




Term identifier()  throws TermWareException :
{
 Token t;               
}
{
 t=<ID>
  { return TermWare.getInstance().getTermFactory().createAtom(t.image); }
}


Term number() throws TermWareException :
{                        
 Term retval;
 Token t;
}
{
 t=<OCTALINT>
  { 
    return TermWare.getInstance().getTermFactory().createInt(ParseUtils.parseOctalInt(t.image)); 
  }                                          
 |
 t=<DECIMALINT>
  {
    return TermWare.getInstance().getTermFactory().createInt(ParseUtils.parseDecimalInt(t.image));
  }
 |
 t=<HEXADECIMALINT>
  {
    return TermWare.getInstance().getTermFactory().createInt(ParseUtils.parseHexadecimalInt(t.image));
  }        
 |
 t=<DOUBLE_LITERAL>
  {
    return TermWare.getInstance().getTermFactory().createDouble(ParseUtils.parseDouble(t.image));
  }        

}



Term character_literal() :
{
 Token t;
}
{
 t=<CHARACTER>
 { return TermWare.getInstance().getTermFactory().createString(t.image); }
}

Term string_literal() :
{
 Token t;
}
{
 t=<STRING>
 { return TermWare.getInstance().getTermFactory().createString(t.image); }
}


<DEFAULT>
SKIP:
{
 < (" ")+ >
}


<DEFAULT>
TOKEN:                          
{
 <NEWLINE: "\n"|"\n\r"|"\r\n"|"\r" >
 |
 <  OCTALINT : "0" (["0"-"7"])* (["u","U","l","L"])? >
 |
 <  DECIMALINT : ["1"-"9"] (["0"-"9"])* (["u","U","l","L"])? >
 |
 <  HEXADECIMALINT : ("0x"|"0X") (["0"-"9","a"-"f","A"-"F"])+ (["u","U","l","L"])? >
 |
 < DOUBLE_LITERAL : (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
                   |
                    "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
                   |
                    (["0"-"9"])+ (<EXPONENT>) (["f","F","d","D"])?
                   |
                    (["0"-"9"])+ (["f","F","d","D"])
 >
 |
 < #EXPONENT : ["e","E"]  (["+","-"])? (["0"-"9"])+ >
 |
 <ID: (["a"-"z"]|["A"-"Z"]|"_")((["a"-"z"]|["A"-"Z"]|["0"-"9"])+)? >
 |
 /* punctuation */
 <PUNCT: ("@"|"$"|"^"|"="|"?"|"\\"|"."|";"|":"|"{"|"}"|"["|"]"|"`") >
 |
 <LESS: "<" > 
 |
 <GREATER: ">" >
 |
 <LOGICAL_OR: "||" >
 |
 <LOGICAL_AND: "&&" >
 |
 <BIT_OR: "|" >
 |
 <BIT_AND: "&" >
 |
 <EQ: "==" >
 |
 <NEQ: "!=" >
 |
 <LESS_EQ: "<=" >
 |
 <GREATER_EQ: ">=" >
 |
 <LEFT_SHIFT: "<<" >
 |
 <RIGHT_SHIFT: ">>" >
 |
 <PLUS: "+" >              
 |
 <MINUS: "-" >
 |                        
 <MULTIPLY: "*" >
 |
 <DIVIDE: "/" >
 |
 <MOD: "%" >
 |
 <BIT_NEGATE: "~" >
 |
 <LOGICAL_NOT: "!" >
 |
 <NN: "##">
 |
 <  CHARACTER : "'"
   (   (~["'","\\","\n","\r"])
   | ("\\" (
             ["n","t","v","b","r","f","a","\\","?","'","\""]
            |
             "0" (["0"-"7"])*
            |
             ["1"-"9"] (["0"-"9"])*
            |
             ("0x" | "0X") (["0"-"9","a"-"f","A"-"F"])+
           )
     )
   )
   "'" >
 |
   <STRING:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}


