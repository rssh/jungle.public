/* Generated By:JavaCC: Do not edit this line. CPPPParserTokenManager.java */
package ua.gradsoft.cppp.parse;
import java.io.*;
import java.util.*;
import ua.gradsoft.termware.*;
import ua.gradsoft.termware.exceptions.*;
import ua.gradsoft.cppp.utils.*;

public class CPPPParserTokenManager implements CPPPParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjMoveStringLiteralDfa0_3()
{
   return jjMoveNfa_3(2, 0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
private final int jjMoveNfa_3(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar != 47)
                     break;
                  kind = 53;
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0x100000200L & l) == 0L)
                     break;
                  kind = 53;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x23ffcL) != 0L)
         {
            jjmatchedKind = 23;
            return 7;
         }
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 24;
            return -1;
         }
         if ((active0 & 0x10000000000L) != 0L)
            return 46;
         return -1;
      case 1:
         if ((active0 & 0x23fe0L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 1;
            }
            return 7;
         }
         if ((active0 & 0x80000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 24;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x1cL) != 0L)
            return 7;
         return -1;
      case 2:
         if ((active0 & 0x23ff8L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 2;
            return 7;
         }
         return -1;
      case 3:
         if ((active0 & 0x23798L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 3;
            return 7;
         }
         if ((active0 & 0x860L) != 0L)
            return 7;
         return -1;
      case 4:
         if ((active0 & 0x22510L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 4;
            return 7;
         }
         if ((active0 & 0x1288L) != 0L)
            return 7;
         return -1;
      case 5:
         if ((active0 & 0x400L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 5;
            }
            return 7;
         }
         if ((active0 & 0x22110L) != 0L)
            return 7;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 43;
         return jjMoveStringLiteralDfa1_0(0x100000000L);
      case 35:
         jjmatchedKind = 1;
         return jjMoveStringLiteralDfa1_0(0x100000000000L);
      case 37:
         return jjStopAtPos(0, 41);
      case 38:
         jjmatchedKind = 30;
         return jjMoveStringLiteralDfa1_0(0x10000000L);
      case 40:
         return jjStopAtPos(0, 14);
      case 41:
         return jjStopAtPos(0, 15);
      case 42:
         return jjStopAtPos(0, 39);
      case 43:
         return jjStopAtPos(0, 37);
      case 44:
         return jjStopAtPos(0, 16);
      case 45:
         return jjStopAtPos(0, 38);
      case 47:
         return jjStartNfaWithStates_0(0, 40, 46);
      case 60:
         jjmatchedKind = 25;
         return jjMoveStringLiteralDfa1_0(0x4000a00000000L);
      case 61:
         return jjMoveStringLiteralDfa1_0(0x80000000L);
      case 62:
         jjmatchedKind = 26;
         return jjMoveStringLiteralDfa1_0(0x1400000000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x20100L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x10e0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x41cL);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x800L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x2000L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x200L);
      case 124:
         jjmatchedKind = 29;
         return jjMoveStringLiteralDfa1_0(0x8000000L);
      case 126:
         return jjStopAtPos(0, 42);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000L);
      case 35:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 44);
         break;
      case 38:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 28);
         break;
      case 60:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 35);
         break;
      case 61:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 31);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 32);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 33);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 34);
         break;
      case 62:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 36);
         break;
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x20100L);
      case 102:
         if ((active0 & 0x4L) != 0L)
         {
            jjmatchedKind = 2;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x18L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x800L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x60L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x680L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x3000L);
      case 124:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 27);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x288L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x20100L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x20L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x810L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 45:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(3, 50);
         break;
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x10L);
      case 101:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 6, 7);
         else if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 11, 7);
         return jjMoveStringLiteralDfa4_0(active0, 0x208L);
      case 102:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 5, 7);
         break;
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x20180L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x400L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x10L);
      case 102:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(4, 3, 7);
         else if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 7, 7);
         else if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 9, 7);
         break;
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x20100L);
      case 114:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 12, 7);
         break;
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 13, 7);
         break;
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x400L);
      case 101:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L);
      case 102:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 4, 7);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 17, 7);
         break;
      case 101:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 10, 7);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 48;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 46:
                  if (curChar == 47)
                  {
                     if (kind > 49)
                        kind = 49;
                     jjCheckNAdd(47);
                  }
                  else if (curChar == 42)
                  {
                     if (kind > 48)
                        kind = 48;
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                     jjCheckNAdd(5);
                  }
                  else if ((0xac00401000000000L & l) != 0L)
                  {
                     if (kind > 24)
                        kind = 24;
                  }
                  else if ((0x100000200L & l) != 0L)
                  {
                     if (kind > 18)
                        kind = 18;
                     jjCheckNAddStates(0, 2);
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 21)
                        kind = 21;
                  }
                  else if (curChar == 47)
                     jjCheckNAddTwoStates(12, 46);
                  else if (curChar == 34)
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAddStates(3, 6);
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAddStates(7, 10);
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  else if (curChar == 10)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 13 && kind > 21)
                     kind = 21;
                  break;
               case 2:
                  if (curChar == 10)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (curChar == 10 && kind > 21)
                     kind = 21;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjCheckNAdd(5);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 8:
                  if ((0xac00401000000000L & l) != 0L && kind > 24)
                     kind = 24;
                  break;
               case 9:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAddStates(0, 2);
                  break;
               case 10:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAdd(10);
                  break;
               case 11:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(11, 13);
                  break;
               case 12:
                  if (curChar == 42 && kind > 48)
                     kind = 48;
                  break;
               case 13:
                  if (curChar == 47)
                     jjCheckNAdd(12);
                  break;
               case 15:
                  if (curChar != 10)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAdd(16);
                  break;
               case 16:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAdd(16);
                  break;
               case 17:
                  if (curChar != 13)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAdd(16);
                  break;
               case 18:
                  if (curChar == 10)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 20:
                  if (curChar == 34 && kind > 24)
                     kind = 24;
                  break;
               case 21:
                  if (curChar != 39)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAddStates(7, 10);
                  break;
               case 22:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 24:
                  if ((0x8000008400000000L & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 25:
                  if (curChar == 39 && kind > 45)
                     kind = 45;
                  break;
               case 26:
                  if (curChar == 48)
                     jjCheckNAddStates(14, 17);
                  break;
               case 27:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(14, 17);
                  break;
               case 28:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddStates(18, 21);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(18, 21);
                  break;
               case 30:
                  if (curChar == 48)
                     jjAddStates(22, 23);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(24, 27);
                  break;
               case 34:
                  if ((0xffffff7fffffdbffL & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAdd(34);
                  break;
               case 35:
                  if (curChar != 34)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAddStates(3, 6);
                  break;
               case 36:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(28, 30);
                  break;
               case 38:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(28, 30);
                  break;
               case 39:
                  if (curChar == 34 && kind > 46)
                     kind = 46;
                  break;
               case 40:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(31, 34);
                  break;
               case 41:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(28, 30);
                  break;
               case 42:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 43:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(41);
                  break;
               case 44:
                  if ((0xfffffffbffffdbffL & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAdd(44);
                  break;
               case 45:
                  if (curChar == 47)
                     jjCheckNAddTwoStates(12, 46);
                  break;
               case 47:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAdd(47);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     jjCheckNAdd(7);
                  }
                  else if ((0x2800000178000001L & l) != 0L)
                  {
                     if (kind > 24)
                        kind = 24;
                  }
                  if (curChar == 92)
                     jjAddStates(35, 38);
                  break;
               case 6:
               case 7:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjCheckNAdd(7);
                  break;
               case 8:
                  if ((0x2800000178000001L & l) != 0L && kind > 24)
                     kind = 24;
                  break;
               case 14:
                  if (curChar == 92)
                     jjAddStates(35, 38);
                  break;
               case 22:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 23:
                  if (curChar == 92)
                     jjAddStates(39, 42);
                  break;
               case 24:
                  if ((0x54404610000000L & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 31:
                  if (curChar == 120)
                     jjCheckNAdd(32);
                  break;
               case 32:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(24, 27);
                  break;
               case 33:
                  if (curChar == 88)
                     jjCheckNAdd(32);
                  break;
               case 34:
                  if (kind > 47)
                     kind = 47;
                  jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(28, 30);
                  break;
               case 37:
                  if (curChar == 92)
                     jjAddStates(43, 45);
                  break;
               case 38:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(28, 30);
                  break;
               case 44:
                  if (kind > 47)
                     kind = 47;
                  jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 47:
                  if (kind > 49)
                     kind = 49;
                  jjstateSet[jjnewStateCnt++] = 47;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 22:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(11, 13);
                  break;
               case 34:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(28, 30);
                  break;
               case 44:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 47:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjstateSet[jjnewStateCnt++] = 47;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 48 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_4()
{
   return jjMoveNfa_4(3, 0);
}
private final int jjMoveNfa_4(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar != 62)
                     break;
                  kind = 55;
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0x100000200L & l) == 0L)
                     break;
                  kind = 55;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 3:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_2()
{
   return jjMoveNfa_2(0, 0);
}
private final int jjMoveNfa_2(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffbffffffffL & l) == 0L)
                     break;
                  kind = 52;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 52;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xbfffffffffffffffL & l) == 0L)
                     break;
                  kind = 51;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 51;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   10, 11, 13, 36, 37, 39, 44, 22, 23, 25, 34, 22, 23, 25, 22, 23, 
   27, 25, 22, 23, 29, 25, 31, 33, 22, 23, 32, 25, 36, 37, 39, 36, 
   37, 41, 39, 15, 18, 19, 20, 24, 26, 28, 30, 38, 40, 42, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", "\43", "\151\146", "\151\146\144\145\146", "\151\146\156\144\145\146", 
"\145\154\151\146", "\145\154\163\145", "\145\156\144\151\146", "\144\145\146\151\156\145", 
"\165\156\144\145\146", "\151\156\143\154\165\144\145", "\154\151\156\145", "\145\162\162\157\162", 
"\160\162\141\147\155\141", "\50", "\51", "\54", "\144\145\146\151\156\145\144", null, null, null, null, 
null, null, null, "\74", "\76", "\174\174", "\46\46", "\174", "\46", "\75\75", 
"\41\75", "\74\75", "\76\75", "\74\74", "\76\76", "\53", "\55", "\52", "\57", "\45", 
"\176", "\41", "\43\43", null, null, null, null, null, "\74\41\55\55", null, null, 
null, null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "FILENAME_1", 
   "FILENAME_2", 
   "IN_C_COMMENT", 
   "IN_XML_COMMENT", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 
   4, 0, 0, 0, -1, 0, -1, 
};
static final long[] jjtoToken = {
   0xbfffffffffffffL, 
};
static final long[] jjtoMore = {
   0x140000000000000L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[48];
private final int[] jjstateSet = new int[96];
protected char curChar;
public CPPPParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public CPPPParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 48; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 5 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 54)
         {
            jjmatchedKind = 54;
         }
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         if (jjmatchedPos == 0 && jjmatchedKind > 56)
         {
            jjmatchedKind = 56;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

}
