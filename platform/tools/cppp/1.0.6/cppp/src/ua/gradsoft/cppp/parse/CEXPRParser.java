/* Generated By:JavaCC: Do not edit this line. CEXPRParser.java */
package ua.gradsoft.cppp.parse;

import java.io.*;
import java.util.*;
import ua.gradsoft.termware.*;
import ua.gradsoft.cppp.utils.*;

/**
 * parser for constant expressions in CPPP
 *<pre>
 *@checker:disable(All)
 *</pre>
 */
public class CEXPRParser implements CEXPRParserConstants {


 public static void main(String[] args)
 {
  try {
    CEXPRParser parser = new CEXPRParser(System.in);
    boolean quit=false;
    while(!quit) {
     Term expr=parser.line();
     expr.print(System.out);
     quit=(expr.isAtom() && expr.getName().equals("quit"));
    }
  }catch(TermWareException ex){
    System.err.println(ex.getMessage());
  }catch(ParseException ex){
    System.err.println(ex.getMessage());
  }
 }

 public Term lineWrapped() throws TermWareException
 {
   try {
     return line();
   }catch(ParseException ex){
     throw new TermWareParseException(ex.getMessage(),ex);
   }
 }

 public boolean eof()
 {
  return eof_;
 }

 private Term  cons(Term t1, Term t2) throws TermWareException
 {
  return TermWare.getInstance().getTermFactory().createTerm("cons",t1,t2);
 }

 private Term  cons(String s1, Term t2) throws TermWareException
 {
  return cons(TermWare.getInstance().getTermFactory().createString(s1),t2);
 }

 private Term  cons(Term t1, String s2) throws TermWareException
 {
  return cons(t1,TermWare.getInstance().getTermFactory().createString(s2));
 }

 private boolean eof_=false;

  final public Term line() throws ParseException, TermWareException {
 Term t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 1:
    case 3:
    case OCTALINT:
    case DECIMALINT:
    case HEXADECIMALINT:
    case DOUBLE_LITERAL:
    case ID:
    case PLUS:
    case MINUS:
    case BIT_NEGATE:
    case LOGICAL_NOT:
      t = constant_expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEWLINE:
        jj_consume_token(NEWLINE);
        break;
      case 0:
        jj_consume_token(0);
                                              eof_=true;
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    {if (true) return t;}
      break;
    case NEWLINE:
      jj_consume_token(NEWLINE);
    {if (true) return TermWare.getInstance().getTermFactory().createNIL();}
      break;
    case 0:
      jj_consume_token(0);
    eof_=true; {if (true) return TermWare.getInstance().getTermFactory().createNIL();}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Term constant_expression() throws ParseException, TermWareException {
 Term t;
    t = or_constant_expression();
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Term or_constant_expression() throws ParseException, TermWareException {
 Term t1=null;
 Term t2=null;
    t1 = and_constant_expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LOGICAL_OR:
      jj_consume_token(LOGICAL_OR);
      t2 = or_constant_expression();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    if (t2==null) {if (true) return t1;}
    {if (true) return TermWare.getInstance().getTermFactory().createTerm("logical_or",t1,t2);}
    throw new Error("Missing return statement in function");
  }

  final public Term and_constant_expression() throws ParseException, TermWareException {
 Term t1=null;
 Term t2=null;
    t1 = bit_or_constant_expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LOGICAL_AND:
      jj_consume_token(LOGICAL_AND);
      t2 = and_constant_expression();
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    if (t2==null) {if (true) return t1;}
    {if (true) return TermWare.getInstance().getTermFactory().createTerm("logical_and",t1,t2);}
    throw new Error("Missing return statement in function");
  }

  final public Term bit_or_constant_expression() throws ParseException, TermWareException {
 Term t1=null;
 Term t2=null;
    t1 = bit_and_constant_expression();
    if (jj_2_1(2)) {
      jj_consume_token(BIT_OR);
      t2 = bit_or_constant_expression();
    } else {
      ;
    }
    if (t2==null) {if (true) return t1;}
    {if (true) return TermWare.getInstance().getTermFactory().createTerm("bit_or",t1,t2);}
    throw new Error("Missing return statement in function");
  }

  final public Term bit_and_constant_expression() throws ParseException, TermWareException {
 Term t1=null;
 Term t2=null;
    t1 = eq_constant_expression();
    if (jj_2_2(2)) {
      jj_consume_token(BIT_AND);
      t2 = bit_and_constant_expression();
    } else {
      ;
    }
    if (t2==null) {if (true) return t1;}
    {if (true) return TermWare.getInstance().getTermFactory().createTerm("bit_and",t1,t2);}
    throw new Error("Missing return statement in function");
  }

  final public Term eq_constant_expression() throws ParseException, TermWareException {
 Term t1=null;
 Term t2=null;
 boolean eq=false;
    t1 = compare_constant_expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
    case NEQ:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        jj_consume_token(EQ);
                       eq=true;
        t2 = bit_and_constant_expression();
        break;
      case NEQ:
        jj_consume_token(NEQ);
        t2 = eq_constant_expression();
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    if (t2==null) {if (true) return t1;}
    if (eq) {
      {if (true) return TermWare.getInstance().getTermFactory().createTerm("eq",t1,t2);}
    }else{
      {if (true) return TermWare.getInstance().getTermFactory().createTerm("neq",t1,t2);}
    }
    throw new Error("Missing return statement in function");
  }

  final public Term compare_constant_expression() throws ParseException, TermWareException {
 Term t1=null;
 Term t2=null;
 Token ct=null;
    t1 = shift_constant_expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LESS:
    case GREATER:
    case LESS_EQ:
    case GREATER_EQ:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LESS:
        ct = jj_consume_token(LESS);
        t2 = compare_constant_expression();
        break;
      case GREATER:
        ct = jj_consume_token(GREATER);
        t2 = compare_constant_expression();
        break;
      case LESS_EQ:
        ct = jj_consume_token(LESS_EQ);
        t2 = compare_constant_expression();
        break;
      case GREATER_EQ:
        ct = jj_consume_token(GREATER_EQ);
        t2 = compare_constant_expression();
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    if (t2==null) {if (true) return t1;}
    if (ct.image.equals("<")) {
      {if (true) return TermWare.getInstance().getTermFactory().createTerm("less",t1,t2);}
    }else if(ct.image.equals(">")) {
      {if (true) return TermWare.getInstance().getTermFactory().createTerm("greater",t1,t2);}
    }else if(ct.image.equals("<=")) {
      {if (true) return TermWare.getInstance().getTermFactory().createTerm("less_eq",t1,t2);}
    }else if(ct.image.equals(">=")) {
      {if (true) return TermWare.getInstance().getTermFactory().createTerm("greater_eq",t1,t2);}
    }else{
      // impossible
      {if (true) return TermWare.getInstance().getTermFactory().createTerm("unknown",t1,t2);}
    }
    throw new Error("Missing return statement in function");
  }

  final public Term shift_constant_expression() throws ParseException, TermWareException {
 Term t1=null;
 Term t2=null;
 Term t3=null;
 Token t;
 String op;
    t1 = additive_constant_expression();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_SHIFT:
      case RIGHT_SHIFT:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_SHIFT:
        t = jj_consume_token(LEFT_SHIFT);
        t2 = additive_constant_expression();
        break;
      case RIGHT_SHIFT:
        t = jj_consume_token(RIGHT_SHIFT);
        t2 = additive_constant_expression();
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                if (t.kind==LEFT_SHIFT) op="left_shif"; else op="right_shift";
                if (t3==null) {
                  t3=TermWare.getInstance().getTermFactory().createTerm(op,t2);
                }else{
                  t3=TermWare.getInstance().getTermFactory().createTerm(t3.getName(),
                                   TermWare.getInstance().getTermFactory().createTerm(op,t3.getSubtermAt(0),t2));
                }
    }
    if (t2==null) {if (true) return t1;}
    {if (true) return TermWare.getInstance().getTermFactory().createTerm(t3.getName(),t1,t3.getSubtermAt(0));}
    throw new Error("Missing return statement in function");
  }

  final public Term additive_constant_expression() throws ParseException, TermWareException {
 Term t1=null;
 Term t2=null;
 Term t3=null;
 Token t;
 String op;
    t1 = multiplicative_constant_expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
        t2 = additive_constant_expression();
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        t2 = additive_constant_expression();
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                if (t.kind==PLUS) op="plus"; else op="minus";
                if (t3==null) {
                  t3=TermWare.getInstance().getTermFactory().createTerm(op,t2);
                }else{
                  t3=TermWare.getInstance().getTermFactory().createTerm(t3.getName(),t2);
                }
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    if (t2==null) {if (true) return t1;}
    {if (true) return TermWare.getInstance().getTermFactory().createTerm(t3.getName(),t1,t3.getSubtermAt(0));}
    throw new Error("Missing return statement in function");
  }

  final public Term multiplicative_constant_expression() throws ParseException, TermWareException {
 Term t1=null;
 Term t2=null;
 Term t3=null;
 Token t;
 String op;
    t1 = unary_constant_expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULTIPLY:
    case DIVIDE:
    case MOD:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
        t = jj_consume_token(MULTIPLY);
        t2 = multiplicative_constant_expression();
        break;
      case DIVIDE:
        t = jj_consume_token(DIVIDE);
        t2 = multiplicative_constant_expression();
        break;
      case MOD:
        t = jj_consume_token(MOD);
        t2 = multiplicative_constant_expression();
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                if (t.kind==MULTIPLY) op="multiply";
                else if (t.kind==DIVIDE) op="divide";
                else op="mod";
                if (t3==null) {
                  t3=TermWare.getInstance().getTermFactory().createTerm(op,t2);
                }else{
                  t3=TermWare.getInstance().getTermFactory().createTerm(t3.getName(),t2);
                }
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    if (t2==null) {if (true) return t1;}
    {if (true) return TermWare.getInstance().getTermFactory().createTerm(t3.getName(),t1,t3.getSubtermAt(0));}
    throw new Error("Missing return statement in function");
  }

  final public Term unary_constant_expression() throws ParseException, TermWareException {
 Term t=null;
 String s=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
    case BIT_NEGATE:
    case LOGICAL_NOT:
      s = unary_operation();
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    t = last_constant_expression();
  if (s==null) {if (true) return t;}
  else {
   {if (true) return TermWare.getInstance().getTermFactory().createTerm(s,t);}
  }
    throw new Error("Missing return statement in function");
  }

  final public String unary_operation() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
    {if (true) return "plus";}
      break;
    case MINUS:
      jj_consume_token(MINUS);
    {if (true) return "minus";}
      break;
    case BIT_NEGATE:
      jj_consume_token(BIT_NEGATE);
    {if (true) return "bit_negate";}
      break;
    case LOGICAL_NOT:
      jj_consume_token(LOGICAL_NOT);
    {if (true) return "logical_not";}
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Term last_constant_expression() throws ParseException, TermWareException {
 Term t;
 Term t1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OCTALINT:
    case DECIMALINT:
    case HEXADECIMALINT:
    case DOUBLE_LITERAL:
      t = number();
    {if (true) return t;}
      break;
    case 1:
      jj_consume_token(1);
      t = constant_expression();
      jj_consume_token(2);
     {if (true) return t;}
      break;
    default:
      jj_la1[16] = jj_gen;
      if (jj_2_3(2)) {
        t = identifier();
        jj_consume_token(1);
        t1 = constant_expression_list();
        jj_consume_token(2);
    {if (true) return TermWare.getInstance().getTermFactory().createTerm("call",t,t1);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          t = identifier();
    {if (true) return t;}
          break;
        case 3:
          jj_consume_token(3);
          jj_consume_token(1);
          t = identifier();
          jj_consume_token(2);
    {if (true) return TermWare.getInstance().getTermFactory().createTerm("defined",t);}
          break;
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Term constant_expression_list() throws ParseException, TermWareException {
 Term t1=null;
 Term t2=null;
 Term t3=null;
    t1 = constant_expression();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 4:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_2;
      }
      jj_consume_token(4);
      t2 = constant_expression();
                            if (t3==null) t3=t2;
                            else t3=cons(t3,t2);
    }
   if (t2==null) {if (true) return t1;}
   else {if (true) return cons(t3,t2);}
    throw new Error("Missing return statement in function");
  }

  final public Term identifier() throws ParseException, TermWareException {
 Token t;
    t = jj_consume_token(ID);
    {if (true) return TermWare.getInstance().getTermFactory().createAtom(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public Term number() throws ParseException, TermWareException {
 Term retval;
 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OCTALINT:
      t = jj_consume_token(OCTALINT);
    {if (true) return TermWare.getInstance().getTermFactory().createInt(ParseUtils.parseOctalInt(t.image));}
      break;
    case DECIMALINT:
      t = jj_consume_token(DECIMALINT);
    {if (true) return TermWare.getInstance().getTermFactory().createInt(ParseUtils.parseDecimalInt(t.image));}
      break;
    case HEXADECIMALINT:
      t = jj_consume_token(HEXADECIMALINT);
    {if (true) return TermWare.getInstance().getTermFactory().createInt(ParseUtils.parseHexadecimalInt(t.image));}
      break;
    case DOUBLE_LITERAL:
      t = jj_consume_token(DOUBLE_LITERAL);
    {if (true) return TermWare.getInstance().getTermFactory().createDouble(ParseUtils.parseDouble(t.image));}
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Term character_literal() throws ParseException {
 Token t;
    t = jj_consume_token(CHARACTER);
   {if (true) return TermWare.getInstance().getTermFactory().createString(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public Term string_literal() throws ParseException {
 Token t;
    t = jj_consume_token(STRING);
   {if (true) return TermWare.getInstance().getTermFactory().createString(t.image);}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_3R_26() {
    if (jj_scan_token(HEXADECIMALINT)) return true;
    return false;
  }

  final private boolean jj_3R_3() {
    if (jj_3R_4()) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_4()) return true;
    return false;
  }

  final private boolean jj_3R_25() {
    if (jj_scan_token(DECIMALINT)) return true;
    return false;
  }

  final private boolean jj_3R_12() {
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    if (jj_scan_token(3)) return true;
    return false;
  }

  final private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_12()) jj_scanpos = xsp;
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3R_8() {
    if (jj_3R_9()) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_3R_5()) return true;
    return false;
  }

  final private boolean jj_3R_24() {
    if (jj_scan_token(OCTALINT)) return true;
    return false;
  }

  final private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(BIT_OR)) return true;
    if (jj_3R_3()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_5()) return true;
    if (jj_scan_token(1)) return true;
    return false;
  }

  final private boolean jj_3R_16() {
    if (jj_scan_token(1)) return true;
    return false;
  }

  final private boolean jj_3R_6() {
    if (jj_3R_7()) return true;
    return false;
  }

  final private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_15() {
    if (jj_3R_23()) return true;
    return false;
  }

  final private boolean jj_3R_5() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  final private boolean jj_3R_9() {
    if (jj_3R_10()) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    if (jj_scan_token(LOGICAL_NOT)) return true;
    return false;
  }

  final private boolean jj_3R_21() {
    if (jj_scan_token(BIT_NEGATE)) return true;
    return false;
  }

  final private boolean jj_3R_4() {
    if (jj_3R_6()) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  final private boolean jj_3R_10() {
    if (jj_3R_11()) return true;
    return false;
  }

  final private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_7() {
    if (jj_3R_8()) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    if (jj_scan_token(DOUBLE_LITERAL)) return true;
    return false;
  }

  public CEXPRParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[20];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x41,0x8c0017cb,0x10000,0x20000,0x300000,0x300000,0xc0c000,0xc0c000,0x3000000,0x3000000,0xc000000,0xc000000,0x70000000,0x70000000,0x8c000000,0x8c000000,0x782,0x1008,0x10,0x780,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[3];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public CEXPRParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public CEXPRParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CEXPRParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public CEXPRParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CEXPRParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public CEXPRParser(CEXPRParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(CEXPRParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[36];
    for (int i = 0; i < 36; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 20; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 36; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 3; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
