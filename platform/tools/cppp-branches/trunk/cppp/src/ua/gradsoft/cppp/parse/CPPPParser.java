/* Generated By:JavaCC: Do not edit this line. CPPPParser.java */
package ua.gradsoft.cppp.parse;

import java.io.*;
import java.util.*;

import ua.gradsoft.termware.*;
import ua.gradsoft.termware.exceptions.*;
import ua.gradsoft.cppp.utils.*;

/**
 * parser for C preprocessor.
 *<pre>
 *@!checker:disable(All)@!
 *</pre>
 */
public class CPPPParser implements CPPPParserConstants {

 public static CPPPParser createParser(String[] args, Reader in, String inFname) throws TermWareException
 {
  Vector searchPath=new Vector();
  String inputFname=null;
  String outputFname=null;
  HashMap predefined=new HashMap();
  String outputLinePrefix="#__FILE__:__LINE__:";
  int i=0;
  while(i<args.length) {
    if (args[i].equals("-I")) {
       ++i;
       if (i>=args.length) {
         throw new AssertException("-I option require argument");
       }
       searchPath.add(args[i]);
       ++i;
    }else if(args[i].equals("-o")) {
       ++i;
       if (i>=args.length) {
         throw new AssertException("-o option require argument");
       }
       outputFname=args[i];
       ++i;
    }else if(args[i].equals("-D")) {
       ++i;
       if (i>=args.length) {
         throw new AssertException("-D option require argument");
       }
       int eqIndex=args[i].indexOf('=');
       if (eqIndex==-1) {
         predefined.put(args[i],"");
       }else{
         String frs=args[i].substring(0,eqIndex);
         String snd=args[i].substring(eqIndex+1);
         predefined.put(frs,snd);
       }
       ++i;
    }else if(args[i].equals("-l")) {
       ++i;
       if (i>=args.length) {
         throw new AssertException("-l option require argument");
       }
       outputLinePrefix=args[i];
       ++i;
    }else{
       if (inputFname==null) {
         inputFname=args[i];
         ++i;
       }else{
         throw new AssertException(args[i]+" override "+inputFname+" as input file");
       }
    }
  }
  CPPPParser retval;
  if (inputFname==null) {
    inputFname = inFname;
    retval = new CPPPParser(in);
    retval.setInputFname(inputFname);
  }else{
    Reader input;
    try {
      input = new BufferedReader(new FileReader(inputFname));
    }catch(FileNotFoundException ex){
      throw new AssertException("File "+inputFname+" not found.");
    }
    retval = new CPPPParser(input);
    retval.setInputFname(inputFname);
  }
  retval.init();
  retval.setSearchPath(searchPath);
  if (outputFname==null) {
    retval.setOutput(new PrintWriter(System.out,true));
  }else{
    FileWriter fo;
    try {
      fo = new FileWriter(outputFname);
    }catch(IOException ex){
      throw new AssertException("Can't open file '"+outputFname+"' for writing:"+ex.getMessage());
    }
    retval.setOutput(new PrintWriter(fo));
  }
  retval.setPredefined(predefined);
  retval.setOutputLinePrefix(outputLinePrefix);
  return retval;
 }


 /**
  *  must have type "cppp_args(t_1,..t_n)", and t_1, t_n must be strings.
  **/
 public static CPPPParser create(Reader in, String inFname, Term args) throws TermWareException
 {
  String usage="cppp parser argument must have structure like \n";
  usage+="'cppp_args(x_1,..x_n)', where x_i are strings, which are correspond\n";
  usage+=" to command line options. or NIL\n";
  if (args.isNil()) {
   Term[] empty=new Term[0];
   args=TermWare.getInstance().getTermFactory().createComplexTerm("cppp_args",empty);
  }
  if (!args.isComplexTerm()) {
    throw new AssertException(usage);
  }
  if (!args.getName().equals("cppp_args")) {
    throw new AssertException(usage);
  }
  String[] sargs=new String[args.getArity()];
  for(int i=0; i<args.getArity(); ++i) {
    Term x = args.getSubtermAt(i);
    if (x.isComplexTerm()) throw new AssertException("usage");
    sargs[i]=x.getName();
  }
  return createParser(sargs,in,inFname);
 }


 public static void main(String[] args)
 {
  try {
    CPPPParser parser = createParser(args,new InputStreamReader(System.in),"<stdin>");
    parser.run();
    parser.close();
  }catch(TermWareException ex){
    try {
      PrintWriter writer = new PrintWriter(new FileWriter("log1"));
      writer.println(ex.getMessage());
      ex.printStackTrace(writer);
      writer.close();
    }catch(IOException ex1){
      ex1.printStackTrace();
      ex.printStackTrace();
    }
    System.err.println(ex.getMessage());
  }
 }


 public void  run() throws TermWareException
 {
  try {
   while(line()){
   }
  }catch(ParseException ex){
    throw new TermWareParseException(ex.getMessage(),ex);
  }
 }



 public  void  setHelper(CPPPParserHelper helper)
 {
  helper_ = helper;
  if (inputFname_!=null) {
    helper.setFileName(inputFname_);
  }
  helper_.setLine(lineCount_);
 }


 public  CommentsDB  getCommentsDB()
 {
  return commentsDB_;
 }


 private void setCommentsDB(CommentsDB db)
 {
  commentsDB_=db;
 }

 public boolean  isPrintFileAndLine()
 {
  return printFileAndLine_;
 }

 public void    setPrintFileAndLine(boolean v)
 {
  printFileAndLine_=v;
 }

 public void  setOutputLinePrefix(String outputLinePrefix)
 {
  outputLinePrefixFormat_=new OutputLinePrefixFormat(outputLinePrefix);
 }

 private void  setOutputLinePrefixFormat(OutputLinePrefixFormat format)
 {
  outputLinePrefixFormat_=format;
 }


 public void  setPredefined(Map<String,String> predefined) throws TermWareException
 {
  // generate temporary set of #define in memory
   if (predefined==null || predefined.size()==0) return;
   if (helper_==null) {
     setHelper(new CPPPParserHelper());
   }
   ByteArrayOutputStream tmpBytes = new ByteArrayOutputStream();
   PrintWriter tmpOut=new PrintWriter(tmpBytes);
   for(Map.Entry<String,String> cur:predefined.entrySet()) {
      String line="#define "+cur.getKey()+" "+cur.getValue();
      tmpOut.println(line);
   }
    tmpOut.flush();
   CPPPParser nestedParser = createNestedParser(
         new InputStreamReader(new ByteArrayInputStream(tmpBytes.toByteArray())),
         "predefined macrodefinitons"
                                               );

   nestedParser.run();

 }

 private void  init() throws TermWareException
 {
  lineCount_=1;
  enabled_=true;
  if (ifHelper_==null) {
    ifHelper_=new IfHandleHelper(this);
  }
  if (helper_==null) {
    setHelper(new CPPPParserHelper());
  }
  commentsDB_ = new CommentsDB();
  debug_ = false;
 }

 /**
  * get filename from #INCLUDE statement.
  *   Q(strind) or F("string")
  **/
 private String  getIncludeFileName(Term t) throws TermWareException
 {
  String retval=null;
  if (t.getName().equals("Q")) {
    //TODO: file must be situated at the same directory, as inputFname.
    retval = t.getSubtermAt(0).getString();
  }else if(t.getName().equals("F")) {
    String iname=t.getSubtermAt(0).getString();
    for(String candidate: searchPath_) {
      String fullFname = candidate+File.separator+iname;
      File candidateFile = new File(fullFname);
      if (candidateFile.exists()) {
        try {
          retval=candidateFile.getCanonicalPath();
        }catch(IOException ex){
          retval=fullFname;
        }
        // TODO: add options for different modes of include file canonization.
        break;
      }
    }
    if (retval==null) {
      throw new AssertException("Can't find file:"+iname+" for inclusion");
    }
  }else if(t.getName().equals("M")) {
    t=helper_.ask(t.getSubtermAt(0));
    if (t.isString()) {
      String s=t.getString();
      if (s.charAt(0)=='"') {
        return getIncludeFileName(TermWare.getInstance().getTermFactory().createTerm("Q",TermWare.getInstance().getTermFactory().createString(s.substring(1,s.length()-1))));
      }else{
        throw new AssertException("pattern "+s+"in #include statement does not look as filename");
      }
    }else{
      String s=helper_.stringTerm(t);
      if (s.charAt(0)=='<') {
        return getIncludeFileName(TermWare.getInstance().getTermFactory().createTerm("F",TermWare.getInstance().getTermFactory().createString(s.substring(1,s.length()-1))));
      }else if(s.charAt(0)=='"') {
        return getIncludeFileName(TermWare.getInstance().getTermFactory().createTerm("Q",TermWare.getInstance().getTermFactory().createString(s.substring(1,s.length()-1))));
      }
      throw new AssertException("pattern "+s+"in #include statement does not look as filename");
    }
  }
  return retval;
 }


 public PrintWriter getOutput()
 {
  return out_;
 }

 public void  setOutput(PrintWriter out)
 {
  if (out_!=out) {
    if (out_!=null) {
       out_.flush();
    }
    out_ = out;
  }
 }

 public void close()
 {
   if (out_!=null) {
      out_.close();
   }
 }

 private void setIfHelper(IfHandleHelper ifHelper)
 {
   ifHelper_=ifHelper;
 }


 private void handleIFDEF(Term t)  throws TermWareException
 {
  if (debug_) {
    System.err.print("handleIFDEF:");
    t.print(System.err);
    System.err.println();
  }
  t=TermWare.getInstance().getTermFactory().createBoolean(helper_.defined(t.getName()));
  enabled_=ifHelper_.handleIF(t);
  incLineCount();
 }

 private void handleIFNDEF(Term t) throws TermWareException
 {
  if (debug_) {
    System.err.print("handleIFNDEF:");
    t.print(System.err);
    System.err.println();
  }
  t=TermWare.getInstance().getTermFactory().createBoolean(!helper_.defined(t.getName()));
  enabled_=ifHelper_.handleIF(t);
  incLineCount();
 }


 private void handleIF(Term t) throws TermWareException
 {
  if (debug_) {
    System.err.print("handleIF:");
    t.print(System.err);
    System.err.println();
  }
  enabled_=ifHelper_.handleIF(t);
  incLineCount();
 }

 private void handleELIF(Term t) throws TermWareException
 {
  if (debug_) {
    System.err.print("handleELIF:");
    t.print(System.err);
    System.err.println();
  }
  enabled_=ifHelper_.handleELIF(t);
  incLineCount();
 }

 private void handleELSE()  throws TermWareException
 {
  if (debug_) {
    System.err.println("handleELSE");
  }
  enabled_=ifHelper_.handleELSE();
  incLineCount();
 }


 private void handleENDIF() throws TermWareException
 {
  if (debug_) {
    System.err.println("handleENDIF");
  }
  enabled_=ifHelper_.handleENDIF();
  incLineCount();
 }



 private void handleDEFINE(Term t)  throws TermWareException
 {
  if (enabled_) {
    if (debug_) {
      System.err.print("handleDEFINE:");
      t.print(System.err);
      System.err.println();
    }
    helper_.set(t);
  }
  incLineCount();
 }


 private void handleUNDEF(Term t) throws TermWareException
 {
  if (enabled_) {
    if (debug_) {
      System.err.print("handleUNDEF:");
      t.print(System.err);
      System.err.println();
    }
    helper_.undef(t.getName());
  }
  incLineCount();
 }

 private void handleINCLUDE(Term t) throws TermWareException
 {
  if (enabled_) {
    if (debug_) {
      System.err.print("handleINCLUDE:");
      t.print(System.err);
      System.err.println();
    }
    String fname=getIncludeFileName(t);
    Reader newIn;
    try {
      newIn = new FileReader(fname);
    }catch(FileNotFoundException ex){
      throw new AssertException("can't open file:"+fname);
    }
    out_.flush();
    CPPPParser nestedParser = createNestedParser(newIn,fname);
    try {
      nestedParser.run();
    }catch(TermWareException ex){
      throw ex;
    }finally{
      try {
        newIn.close();
      }catch(IOException ex){
        throw new AssertException("Can't close include file "+fname,ex);
      }
    }
  }
  incLineCount();
 }

private CPPPParser createNestedParser(Reader newIn,String newFname)
{
    CPPPParser nestedParser = new CPPPParser(newIn);
    nestedParser.setSearchPath(searchPath_);
  //  getOutput().flush();
    nestedParser.setOutput(getOutput());
    nestedParser.setHelper(helper_);
    nestedParser.setIfHelper(ifHelper_);
    nestedParser.setCommentsDB(commentsDB_);
    nestedParser.setDebug(debug_);
    nestedParser.setPrintFileAndLine(printFileAndLine_);
    nestedParser.setEraseCComments(eraseC_Comments_);
    nestedParser.setEraseCppComments(eraseCPP_Comments_);
    nestedParser.setEraseXmlComments(eraseXML_Comments_);
    nestedParser.setInputFname(newFname);
    nestedParser.setOutputLinePrefixFormat(outputLinePrefixFormat_);
    nestedParser.enabled_=true;
    return nestedParser;
}




 private void handleLINE(Term t) throws TermWareException
 {
   if (enabled_ && debug_) {
    System.err.print("handleLINE:");
    t.print(System.err);
    System.err.println();
  }
  //TODO: implement set of file and line.
  incLineCount();
 }


 private void handleERROR(Term t)  throws TermWareException
 {
  if (enabled_) {
    if (debug_) {
      System.err.print("handleERROR:");
      t.print(System.err);
      System.err.println();
    }
    ByteArrayOutputStream tmpBytes=new ByteArrayOutputStream();
    helper_.printTerm(t,new PrintWriter(tmpBytes));
    throw new CPPPErrorDirectiveException(lineCount_,inputFname_,tmpBytes.toString());
  }else{
    //do nothing.
  }
  incLineCount();
 }


 private void handlePRAGMA(Term t) throws TermWareException
 {
  if (enabled_ && debug_) {
    System.err.print("handlePRAGMA:");
    t.print(System.err);
    System.err.println();
  }
  incLineCount();
 }

 private void handleEMPTYPRAGMA()
 {
  if (debug_) {
    System.err.println("handleEMPTYPRAGMA");
  }
  incLineCount();
 }


 private void handleEMPTY()
 {
   //System.err.println("handleEMPTY");
   incLineCount();
 }


 private void handlePP_TOKENS(Term t)  throws TermWareException
 {
  PrintWriter out = (out_==null ? new PrintWriter(System.out,true) : out_ );
  if (enabled_ && debug_) {
   System.err.print("handlerPP_TOKENS:");
   t.print(System.err);
   System.err.println();
   System.err.println("out="+out.toString());
  }
  if (enabled_) {
    //out_.print("#line \""+inputFname_+"\" "+lineCount_+":");
    if (printFileAndLine_) {
       out.print("# "+lineCount_+" "+"\""+inputFname_+"\" ");
    }
    t=helper_.ask(t);
    helper_.printTerm(t,out);
    out.println();
  }
  if (enabled_ && debug_) {
   System.err.print("out PP_TOKENS:");
   t.print(System.err);
   System.err.println();
  }

  incLineCount();
 }

 private void handleNEWLINE()
 {
   incLineCount();
 }

 private void handleEOF()
 {
   if (debug_) {
     System.err.println("handleEOF");
   }
 }

 private void handleC_COMMENT(Token t)
 {
   if (debug_) {
     System.err.println("handleC_COMMENT:"+t.image);
   }
   int n=ParseUtils.countLines(t.image);
   incLineCount(n);
 }

 private void handleXML_COMMENT(Token t)
 {
   if (debug_) {
     System.err.println("handleXML_COMMENT:"+t.image);
   }
   int n=ParseUtils.countLines(t.image);
   incLineCount(n);
 }


 private void handleCPP_COMMENT(Token t)
 {
   if (debug_) {
     System.err.println("handleCPP_COMMENT:"+t.image);
   }
 }


 public boolean checkConstantExpressionInLine(Term t) throws TermWareException
 {
   return helper_.checkUnparsedConstantExpression(t);
 }

 private void incLineCount(int n)
 {
   lineCount_+=n;
   if (helper_!=null) helper_.setLine(lineCount_);
 }


 private void incLineCount()
 {
   ++lineCount_;
   if (helper_!=null) helper_.setLine(lineCount_);
 }

 private Term  cons(Term t1, Term t2) throws TermWareException
 {
  return TermWare.getInstance().getTermFactory().createTerm("cons",t1,t2);
 }

 private Term  cons(String s1, Term t2) throws TermWareException
 {
  return cons(TermWare.getInstance().getTermFactory().createString(s1),t2);
 }

 private Term  cons(Term t1, String s2) throws TermWareException
 {
  return cons(t1,TermWare.getInstance().getTermFactory().createString(s2));
 }

 private Term  cons1(Term t1, Term t2) throws TermWareException
 {
  return TermWare.getInstance().getTermFactory().createTerm("cons1",t1,t2);
 }

 private Term  createString(String s)
 {
  return TermWare.getInstance().getTermFactory().createString(s);
 }

 private void setInputFname(String fname)
 {
  inputFname_=fname;
  if (helper_!=null) helper_.setFileName(fname);
 }


 public void setSearchPath(List<String> searchPath)
 {
  searchPath_ = searchPath;
 }


 public void setDebug(boolean b)
 {
  debug_=b;
 }

 public void setEraseCComments(boolean b)
 {
  eraseC_Comments_=b;
 }

 public void setEraseCppComments(boolean b)
 {
  eraseCPP_Comments_=b;
 }

 public void setEraseXmlComments(boolean b)
 {
  eraseXML_Comments_=b;
 }

 private boolean debug_=true;
 private boolean printFileAndLine_=true;
 private boolean eraseC_Comments_=true;
 private boolean eraseCPP_Comments_=true;
 private boolean eraseXML_Comments_=false;

 private int lineCount_;
 private boolean enabled_;

 private CPPPParserHelper helper_;
 private IfHandleHelper   ifHelper_;
 private OutputLinePrefixFormat outputLinePrefixFormat_;


 private String   inputFname_;

 private PrintWriter out_;
 private CommentsDB  commentsDB_;

 private List<String>  searchPath_;

  final public boolean line() throws ParseException, TermWareException {
 Term t=null;
 Term t1=null;
 boolean retval=true;
 String wse=null;
    if (jj_2_1(3)) {
      jj_consume_token(1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
      case WSCONTINUE:
      case C_COMMENT_BEGIN:
      case CPP_COMMENT:
        wse();
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      jj_consume_token(2);
      t = pp_tokens();
      jj_consume_token(NEWLINE);
     handleIF(t);
    } else if (jj_2_2(3)) {
      jj_consume_token(1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
      case WSCONTINUE:
      case C_COMMENT_BEGIN:
      case CPP_COMMENT:
        wse();
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      jj_consume_token(3);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
      case WSCONTINUE:
      case C_COMMENT_BEGIN:
      case CPP_COMMENT:
        wse();
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      t = identifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
      case WSCONTINUE:
      case C_COMMENT_BEGIN:
      case CPP_COMMENT:
        wse();
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      jj_consume_token(NEWLINE);
     handleIFDEF(t);
    } else if (jj_2_3(3)) {
      jj_consume_token(1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
      case WSCONTINUE:
      case C_COMMENT_BEGIN:
      case CPP_COMMENT:
        wse();
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      jj_consume_token(4);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
      case WSCONTINUE:
      case C_COMMENT_BEGIN:
      case CPP_COMMENT:
        wse();
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      t = identifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
      case WSCONTINUE:
      case C_COMMENT_BEGIN:
      case CPP_COMMENT:
        wse();
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(NEWLINE);
     handleIFNDEF(t);
    } else if (jj_2_4(3)) {
      jj_consume_token(1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
      case WSCONTINUE:
      case C_COMMENT_BEGIN:
      case CPP_COMMENT:
        wse();
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      jj_consume_token(5);
      t = pp_tokens();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
      case WSCONTINUE:
      case C_COMMENT_BEGIN:
      case CPP_COMMENT:
        wse();
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      jj_consume_token(NEWLINE);
     handleELIF(t);
    } else if (jj_2_5(3)) {
      jj_consume_token(1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
      case WSCONTINUE:
      case C_COMMENT_BEGIN:
      case CPP_COMMENT:
        wse();
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      jj_consume_token(6);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
      case WSCONTINUE:
      case C_COMMENT_BEGIN:
      case CPP_COMMENT:
        wse();
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      jj_consume_token(NEWLINE);
     handleELSE();
    } else if (jj_2_6(3)) {
      jj_consume_token(1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
      case WSCONTINUE:
      case C_COMMENT_BEGIN:
      case CPP_COMMENT:
        wse();
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      jj_consume_token(7);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
      case WSCONTINUE:
      case C_COMMENT_BEGIN:
      case CPP_COMMENT:
        wse();
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEWLINE:
        jj_consume_token(NEWLINE);
        break;
      case 0:
        jj_consume_token(0);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
     handleENDIF();
    } else if (jj_2_7(3)) {
      jj_consume_token(1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
      case WSCONTINUE:
      case C_COMMENT_BEGIN:
      case CPP_COMMENT:
        wse();
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      jj_consume_token(8);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
      case WSCONTINUE:
      case C_COMMENT_BEGIN:
      case CPP_COMMENT:
        wse();
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      t = definition();
      jj_consume_token(NEWLINE);
     handleDEFINE(t);
    } else if (jj_2_8(3)) {
      jj_consume_token(1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
      case WSCONTINUE:
      case C_COMMENT_BEGIN:
      case CPP_COMMENT:
        wse();
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      jj_consume_token(9);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
      case WSCONTINUE:
      case C_COMMENT_BEGIN:
      case CPP_COMMENT:
        wse();
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      t = identifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
      case WSCONTINUE:
      case C_COMMENT_BEGIN:
      case CPP_COMMENT:
        wse();
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      jj_consume_token(NEWLINE);
     handleUNDEF(t);
    } else if (jj_2_9(3)) {
      jj_consume_token(1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
      case WSCONTINUE:
      case C_COMMENT_BEGIN:
      case CPP_COMMENT:
        wse();
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      jj_consume_token(10);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
      case WSCONTINUE:
      case C_COMMENT_BEGIN:
      case CPP_COMMENT:
        wse();
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
      t = filename();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
      case WSCONTINUE:
      case C_COMMENT_BEGIN:
      case CPP_COMMENT:
        wse();
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      jj_consume_token(NEWLINE);
     handleINCLUDE(t);
    } else if (jj_2_10(3)) {
      jj_consume_token(1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
      case WSCONTINUE:
      case C_COMMENT_BEGIN:
      case CPP_COMMENT:
        wse();
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      jj_consume_token(11);
      t = pp_tokens();
      jj_consume_token(NEWLINE);
     handleLINE(t);
    } else if (jj_2_11(3)) {
      jj_consume_token(1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
      case WSCONTINUE:
      case C_COMMENT_BEGIN:
      case CPP_COMMENT:
        wse();
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
      jj_consume_token(12);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 10:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case WS:
      case WSCONTINUE:
      case CE_INTEGER:
      case ID:
      case PUNCT:
      case LESS:
      case GREATER:
      case LOGICAL_OR:
      case LOGICAL_AND:
      case BIT_OR:
      case BIT_AND:
      case EQ:
      case NEQ:
      case LESS_EQ:
      case GREATER_EQ:
      case LEFT_SHIFT:
      case RIGHT_SHIFT:
      case PLUS:
      case MINUS:
      case MULTIPLY:
      case DIVIDE:
      case MOD:
      case BIT_NEGATE:
      case LOGICAL_NOT:
      case NN:
      case CHARACTER:
      case STRING:
      case ONE_QUOTE:
      case C_COMMENT_BEGIN:
      case CPP_COMMENT:
      case XML_COMMENT_BEGIN:
        t = pp_tokens();
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      jj_consume_token(NEWLINE);
     if (t==null) t=createString(""); handleERROR(t);
    } else if (jj_2_12(3)) {
      jj_consume_token(1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
      case WSCONTINUE:
      case C_COMMENT_BEGIN:
      case CPP_COMMENT:
        wse();
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
      jj_consume_token(13);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 10:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case WS:
      case WSCONTINUE:
      case CE_INTEGER:
      case ID:
      case PUNCT:
      case LESS:
      case GREATER:
      case LOGICAL_OR:
      case LOGICAL_AND:
      case BIT_OR:
      case BIT_AND:
      case EQ:
      case NEQ:
      case LESS_EQ:
      case GREATER_EQ:
      case LEFT_SHIFT:
      case RIGHT_SHIFT:
      case PLUS:
      case MINUS:
      case MULTIPLY:
      case DIVIDE:
      case MOD:
      case BIT_NEGATE:
      case LOGICAL_NOT:
      case NN:
      case CHARACTER:
      case STRING:
      case ONE_QUOTE:
      case C_COMMENT_BEGIN:
      case CPP_COMMENT:
      case XML_COMMENT_BEGIN:
        t = pp_tokens();
        break;
      default:
        jj_la1[26] = jj_gen;
        ;
      }
      jj_consume_token(NEWLINE);
     if (t!=null) handlePRAGMA(t); else handleEMPTYPRAGMA();
    } else if (jj_2_13(3)) {
      jj_consume_token(1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
      case WSCONTINUE:
      case C_COMMENT_BEGIN:
      case CPP_COMMENT:
        wse();
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      jj_consume_token(NEWLINE);
     handleEMPTY();
    } else if (jj_2_14(2)) {
      t = pp_tokens();
      jj_consume_token(NEWLINE);
    handlePP_TOKENS(t);
    } else if (jj_2_15(2)) {
      t = pp_tokens();
      jj_consume_token(0);
    handlePP_TOKENS(t); handleEOF(); retval=false;
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEWLINE:
        jj_consume_token(NEWLINE);
    handleNEWLINE();
        break;
      case 0:
        jj_consume_token(0);
   handleEOF(); retval=false;
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
   {if (true) return retval;}
    throw new Error("Missing return statement in function");
  }

  final public String ws() throws ParseException {
 Token t;
 Token t0=null;
 String s=null;
 String suffix=null;
 StringBuilder sb;
    if (jj_2_22(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
        t0 = jj_consume_token(WS);
        break;
      default:
        jj_la1[29] = jj_gen;
        ;
      }
      t = c_comment();
      if (jj_2_16(2)) {
        suffix = wse();
      } else {
        ;
      }
     handleC_COMMENT(t);
     sb = new StringBuilder();
     if (t0!=null) {
      sb.append(t0.image);
     }
     if (!eraseC_Comments_) {
       sb.append(t.image);
     }
     if (suffix!=null) {
       sb.append(suffix);
     }
     String retval=sb.toString();
     {if (true) return (retval.length()==0 ? " " : retval);}
    } else if (jj_2_23(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WSCONTINUE:
        t0 = jj_consume_token(WSCONTINUE);
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
      t = c_comment();
      if (jj_2_17(2)) {
        suffix = wse();
      } else {
        ;
      }
     incLineCount(); handleC_COMMENT(t);
     sb = new StringBuilder();
     if (t0!=null) { sb.append(t0.image); }
     if (!eraseC_Comments_) { sb.append(t.image); }
     if (suffix!=null) { sb.append(suffix); }
     String retval=sb.toString();
     {if (true) return (retval.length()==0 ? " " : retval);}
    } else if (jj_2_24(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
        t0 = jj_consume_token(WS);
        break;
      default:
        jj_la1[31] = jj_gen;
        ;
      }
      t = xml_comment();
      if (jj_2_18(2)) {
        suffix = wse();
      } else {
        ;
      }
     handleXML_COMMENT(t);
     sb = new StringBuilder();
     if (t0!=null) { sb.append(t0.image); }
     if (!eraseXML_Comments_) { sb.append(t.image); }
     if (suffix!=null) { sb.append(suffix); }
     String retval=sb.toString();
     {if (true) return (retval.length()==0 ? " " : retval);}
    } else if (jj_2_25(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WSCONTINUE:
        t0 = jj_consume_token(WSCONTINUE);
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
      t = xml_comment();
      if (jj_2_19(2)) {
        suffix = wse();
      } else {
        ;
      }
     incLineCount(); handleXML_COMMENT(t);
     sb = new StringBuilder();
     if (t0!=null) { sb.append(t0.image); }
     if (!eraseXML_Comments_) { sb.append(t.image); }
     if (suffix!=null) { sb.append(suffix); }
     String retval=sb.toString();
     {if (true) return (retval.length()==0 ? " " : retval);}
    } else if (jj_2_26(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
        t0 = jj_consume_token(WS);
        break;
      default:
        jj_la1[33] = jj_gen;
        ;
      }
      t = jj_consume_token(CPP_COMMENT);
      if (jj_2_20(2)) {
        suffix = wse();
      } else {
        ;
      }
     handleCPP_COMMENT(t);
     sb = new StringBuilder();
     if (t0!=null) { sb.append(t0.image); }
     if (!eraseCPP_Comments_) { sb.append(t.image); }
     if (suffix!=null) { sb.append(suffix); }
     String retval=sb.toString();
     {if (true) return (retval.length()==0 ? " " : retval);}
    } else if (jj_2_27(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WSCONTINUE:
        t0 = jj_consume_token(WSCONTINUE);
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      t = jj_consume_token(CPP_COMMENT);
      if (jj_2_21(2)) {
        wse();
      } else {
        ;
      }
     incLineCount(); handleCPP_COMMENT(t);
     sb = new StringBuilder();
     if (t0!=null) { sb.append(t0.image); }
     if (!eraseCPP_Comments_) { sb.append(t.image); }
     if (suffix!=null) { sb.append(suffix); }
     String retval=sb.toString();
     {if (true) return (retval.length()==0 ? " " : retval);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
        t = jj_consume_token(WS);
     {if (true) return t.image;}
        break;
      case WSCONTINUE:
        t = jj_consume_token(WSCONTINUE);
     incLineCount(); {if (true) return t.image;}
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public String wse() throws ParseException {
 Token t;
 String retval=null;
 Token prefix=null;
 String suffix=null;
 StringBuilder sb;
    if (jj_2_32(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
        prefix = jj_consume_token(WS);
        break;
      default:
        jj_la1[36] = jj_gen;
        ;
      }
      t = c_comment();
      if (jj_2_28(2)) {
        suffix = wse();
      } else {
        ;
      }
   sb = new StringBuilder();
   if (prefix!=null) {
     sb.append(prefix.image);
   }
   if (!eraseC_Comments_) {
     sb.append(t.image);
   }
   if (suffix!=null) {
     sb.append(suffix);
   }
   handleC_COMMENT(t);
   {if (true) return sb.toString();}
    } else if (jj_2_33(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WSCONTINUE:
        prefix = jj_consume_token(WSCONTINUE);
        break;
      default:
        jj_la1[37] = jj_gen;
        ;
      }
      t = c_comment();
      if (jj_2_29(2)) {
        suffix = wse();
      } else {
        ;
      }
  sb = new StringBuilder();
  if(prefix!=null) {
    sb.append(prefix.image);
  }
  if (!eraseC_Comments_) {
     sb.append(t.image);
  }
  if(suffix!=null) {
    sb.append(suffix);
  }
  incLineCount(); handleC_COMMENT(t);
  {if (true) return sb.toString();}
    } else if (jj_2_34(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
        prefix = jj_consume_token(WS);
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
      t = jj_consume_token(CPP_COMMENT);
      if (jj_2_30(2)) {
        suffix = wse();
      } else {
        ;
      }
  sb = new StringBuilder();
  if(prefix!=null) {
    sb.append(prefix.image);
  }
  if (!eraseCPP_Comments_) {
     sb.append(t.image);
  }
  if(suffix!=null) {
     sb.append(suffix);
  }
  handleCPP_COMMENT(t);
  {if (true) return sb.toString();}
    } else if (jj_2_35(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WSCONTINUE:
        prefix = jj_consume_token(WSCONTINUE);
        break;
      default:
        jj_la1[39] = jj_gen;
        ;
      }
      t = jj_consume_token(CPP_COMMENT);
      if (jj_2_31(2)) {
        suffix = wse();
      } else {
        ;
      }
  sb = new StringBuilder();
  if (prefix!=null) {
   sb.append(prefix.image);
  }
  if (!eraseCPP_Comments_) {
     sb.append(t.image);
  }
  if(suffix!=null) {
     sb.append(suffix);
  }
  incLineCount(); handleCPP_COMMENT(t);
  {if (true) return sb.toString();}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
        t = jj_consume_token(WS);
    {if (true) return t.image;}
        break;
      case WSCONTINUE:
        t = jj_consume_token(WSCONTINUE);
   incLineCount(); {if (true) return t.image;}
        break;
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Term pp_tokens() throws ParseException, TermWareException {
 Term t1=null;
 Term t2=null;
    label_1:
    while (true) {
      t1 = pp_token();
     if (t2==null) {
       t2=t1;
     }else{
       t2=cons(t2,t1);
     }
      if (jj_2_36(2)) {
        ;
      } else {
        break label_1;
      }
    }
   {if (true) return t2;}
    throw new Error("Missing return statement in function");
  }

  final public Term pp_token_or_Ns() throws ParseException, TermWareException {
 Term t1=null;
 Term t2=null;
    label_2:
    while (true) {
      if (jj_2_37(2)) {
        t1 = pp_token();
     if (t2==null) {
       t2=t1;
     }else{
       t2=cons(t2,t1);
     }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
          jj_consume_token(1);
     if (t2==null) {
       t2=createString("#");
     }else{
       t2=cons(t2,createString("#"));
     }
          break;
        default:
          jj_la1[41] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 10:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case WS:
      case WSCONTINUE:
      case CE_INTEGER:
      case ID:
      case PUNCT:
      case LESS:
      case GREATER:
      case LOGICAL_OR:
      case LOGICAL_AND:
      case BIT_OR:
      case BIT_AND:
      case EQ:
      case NEQ:
      case LESS_EQ:
      case GREATER_EQ:
      case LEFT_SHIFT:
      case RIGHT_SHIFT:
      case PLUS:
      case MINUS:
      case MULTIPLY:
      case DIVIDE:
      case MOD:
      case BIT_NEGATE:
      case LOGICAL_NOT:
      case NN:
      case CHARACTER:
      case STRING:
      case ONE_QUOTE:
      case C_COMMENT_BEGIN:
      case CPP_COMMENT:
      case XML_COMMENT_BEGIN:
        ;
        break;
      default:
        jj_la1[42] = jj_gen;
        break label_2;
      }
    }
   {if (true) return t2;}
    throw new Error("Missing return statement in function");
  }

  final public Term pp_token() throws ParseException, TermWareException {
String s;
Term t=null;
Term t1=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      t = identifier();
     {if (true) return t;}
      break;
    case WS:
    case WSCONTINUE:
    case C_COMMENT_BEGIN:
    case CPP_COMMENT:
    case XML_COMMENT_BEGIN:
      s = ws();
    {if (true) return TermWare.getInstance().getTermFactory().createTerm("W",
                                                     createString(s));}
      break;
    case CE_INTEGER:
      t = pp_number();
    {if (true) return t;}
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 10:
    case 12:
    case 13:
    case 17:
      t = pp_keyword();
    {if (true) return t;}
      break;
    case CHARACTER:
      t = character_literal();
    {if (true) return t;}
      break;
    case STRING:
      t = string_literal();
    {if (true) return t;}
      break;
    case 14:
    case 15:
    case 16:
    case PUNCT:
    case LESS:
    case GREATER:
    case LOGICAL_OR:
    case LOGICAL_AND:
    case BIT_OR:
    case BIT_AND:
    case EQ:
    case NEQ:
    case LESS_EQ:
    case GREATER_EQ:
    case LEFT_SHIFT:
    case RIGHT_SHIFT:
    case PLUS:
    case MINUS:
    case MULTIPLY:
    case DIVIDE:
    case MOD:
    case BIT_NEGATE:
    case LOGICAL_NOT:
    case NN:
      t = pp_punctuation();
    {if (true) return t;}
      break;
    case ONE_QUOTE:
      t = one_quote();
    {if (true) return t;}
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Term pp_punctuation() throws ParseException {
 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUNCT:
      t = jj_consume_token(PUNCT);
    {if (true) return createString(t.image);}
      break;
    case LESS:
      jj_consume_token(LESS);
    {if (true) return createString("<");}
      break;
    case GREATER:
      jj_consume_token(GREATER);
    {if (true) return createString(">");}
      break;
    case 14:
      jj_consume_token(14);
       {if (true) return createString("(");}
      break;
    case 15:
      jj_consume_token(15);
       {if (true) return createString(")");}
      break;
    case 16:
      jj_consume_token(16);
    {if (true) return createString(",");}
      break;
    case LOGICAL_OR:
      jj_consume_token(LOGICAL_OR);
                 {if (true) return createString("||");}
      break;
    case LOGICAL_AND:
      jj_consume_token(LOGICAL_AND);
                  {if (true) return createString("&&");}
      break;
    case BIT_OR:
      jj_consume_token(BIT_OR);
            {if (true) return createString("|");}
      break;
    case BIT_AND:
      jj_consume_token(BIT_AND);
             {if (true) return createString("&");}
      break;
    case EQ:
      jj_consume_token(EQ);
        {if (true) return createString("==");}
      break;
    case NEQ:
      jj_consume_token(NEQ);
         {if (true) return createString("!=");}
      break;
    case LESS_EQ:
      jj_consume_token(LESS_EQ);
             {if (true) return createString("<=");}
      break;
    case GREATER_EQ:
      jj_consume_token(GREATER_EQ);
                 {if (true) return createString(">=");}
      break;
    case LEFT_SHIFT:
      jj_consume_token(LEFT_SHIFT);
                 {if (true) return createString("<<");}
      break;
    case RIGHT_SHIFT:
      jj_consume_token(RIGHT_SHIFT);
                  {if (true) return createString(">>");}
      break;
    case PLUS:
      jj_consume_token(PLUS);
          {if (true) return createString("+");}
      break;
    case MINUS:
      jj_consume_token(MINUS);
           {if (true) return createString("-");}
      break;
    case MULTIPLY:
      jj_consume_token(MULTIPLY);
              {if (true) return createString("*");}
      break;
    case DIVIDE:
      jj_consume_token(DIVIDE);
            {if (true) return createString("/");}
      break;
    case MOD:
      jj_consume_token(MOD);
         {if (true) return createString("%");}
      break;
    case BIT_NEGATE:
      jj_consume_token(BIT_NEGATE);
                {if (true) return createString("~");}
      break;
    case LOGICAL_NOT:
      jj_consume_token(LOGICAL_NOT);
                 {if (true) return createString("!");}
      break;
    case NN:
      jj_consume_token(NN);
         {if (true) return createString("##");}
      break;
    default:
      jj_la1[44] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Term pp_keyword() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 3:
      jj_consume_token(3);
    {if (true) return createString("ifdef");}
      break;
    case 4:
      jj_consume_token(4);
    {if (true) return createString("ifndef");}
      break;
    case 2:
      jj_consume_token(2);
    {if (true) return createString("if");}
      break;
    case 5:
      jj_consume_token(5);
    {if (true) return createString("elif");}
      break;
    case 6:
      jj_consume_token(6);
    {if (true) return createString("else");}
      break;
    case 7:
      jj_consume_token(7);
    {if (true) return createString("endif");}
      break;
    case 10:
      jj_consume_token(10);
    {if (true) return createString("include");}
      break;
    case 13:
      jj_consume_token(13);
    {if (true) return createString("pragma");}
      break;
    case 12:
      jj_consume_token(12);
    {if (true) return createString("error");}
      break;
    case 8:
      jj_consume_token(8);
    {if (true) return createString("define");}
      break;
    case 17:
      jj_consume_token(17);
    {if (true) return createString("defined");}
      break;
    default:
      jj_la1[45] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Term filename() throws ParseException, TermWareException {
 Token tk;
 Term t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LESS:
      jj_consume_token(LESS);
         token_source.SwitchTo(FILENAME_1);
      tk = jj_consume_token(FCHAR);
      jj_consume_token(GREATER);
        {if (true) return TermWare.getInstance().getTermFactory().createTerm("F",
                    createString(tk.image));}
      break;
    case STRING:
      tk = jj_consume_token(STRING);
        {if (true) return TermWare.getInstance().getTermFactory().createTerm("Q",
                    TermWare.getInstance().getTermFactory().createString(tk.image.substring(1,tk.image.length()-1)));}
      break;
    case ID:
      t = identifier();
     {if (true) return TermWare.getInstance().getTermFactory().createTerm("M",t);}
      break;
    default:
      jj_la1[46] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Term identifier() throws ParseException, TermWareException {
 Token t;
    t = jj_consume_token(ID);
    {if (true) return TermWare.getInstance().getTermFactory().createAtom(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public Term pp_number() throws ParseException, TermWareException {
 Term retval;
 Token t;
    t = jj_consume_token(CE_INTEGER);
    {if (true) return TermWare.getInstance().getTermFactory().createTerm("N",
                    TermWare.getInstance().getTermFactory().createString(t.image));}
    throw new Error("Missing return statement in function");
  }

  final public Term definition() throws ParseException, TermWareException {
 Term t1;
 Term t2;
 Term t3;
    if (jj_2_39(2)) {
      t1 = identifier();
      wse();
      t2 = replacement_list();
     {if (true) return TermWare.getInstance().getTermFactory().createTerm("define",t1,t2);}
    } else if (jj_2_40(2)) {
      t1 = identifier();
      jj_consume_token(14);
      if (jj_2_38(2)) {
        wse();
      } else {
        ;
      }
      t2 = identifier_list();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
      case WSCONTINUE:
      case C_COMMENT_BEGIN:
      case CPP_COMMENT:
        wse();
        break;
      default:
        jj_la1[47] = jj_gen;
        ;
      }
      jj_consume_token(15);
      t3 = replacement_list();
     {if (true) return TermWare.getInstance().getTermFactory().createTerm("define_list",t1,t2,t3);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        t1 = identifier();
  {if (true) return TermWare.getInstance().getTermFactory().createTerm("define",t1,TermWare.getInstance().getTermFactory().createString(""));}
        break;
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Term identifier_list() throws ParseException, TermWareException {
 Term t1=null;
 Term t2=null;
 Term t3=null;
    t1 = identifier();
    label_3:
    while (true) {
      if (jj_2_41(2)) {
        ;
      } else {
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
      case WSCONTINUE:
      case C_COMMENT_BEGIN:
      case CPP_COMMENT:
        wse();
        break;
      default:
        jj_la1[49] = jj_gen;
        ;
      }
      jj_consume_token(16);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
      case WSCONTINUE:
      case C_COMMENT_BEGIN:
      case CPP_COMMENT:
        wse();
        break;
      default:
        jj_la1[50] = jj_gen;
        ;
      }
      t2 = identifier();
                     if (t3==null) t3=t2;
                     else t3=cons(t3,cons(",",t2));
    }
  if (t2==null) {if (true) return t1;}
  else {if (true) return cons(t1,t3);}
    throw new Error("Missing return statement in function");
  }

  final public Term replacement_list() throws ParseException, TermWareException {
 Term t1=null;
 Term t2=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 10:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case WS:
    case WSCONTINUE:
    case CE_INTEGER:
    case ID:
    case PUNCT:
    case LESS:
    case GREATER:
    case LOGICAL_OR:
    case LOGICAL_AND:
    case BIT_OR:
    case BIT_AND:
    case EQ:
    case NEQ:
    case LESS_EQ:
    case GREATER_EQ:
    case LEFT_SHIFT:
    case RIGHT_SHIFT:
    case PLUS:
    case MINUS:
    case MULTIPLY:
    case DIVIDE:
    case MOD:
    case BIT_NEGATE:
    case LOGICAL_NOT:
    case NN:
    case CHARACTER:
    case STRING:
    case ONE_QUOTE:
    case C_COMMENT_BEGIN:
    case CPP_COMMENT:
    case XML_COMMENT_BEGIN:
      t1 = pp_token_or_Ns();
      break;
    default:
      jj_la1[51] = jj_gen;
      ;
    }
  if (t1==null) {
    {if (true) return TermFactory.createString("");}
  }else{
    // todo: skip ws() tokens
    {if (true) return t1;}
  }
    throw new Error("Missing return statement in function");
  }

  final public Term character_literal() throws ParseException {
 Token t;
    t = jj_consume_token(CHARACTER);
   {if (true) return createString(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public Term string_literal() throws ParseException {
 Token t;
    t = jj_consume_token(STRING);
   {if (true) return createString(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public Term one_quote() throws ParseException, TermWareException {
 Token t;
 String s1;
 String s2;
    t = jj_consume_token(ONE_QUOTE);
  s1=t.image.substring(0,1);
  s2=t.image.substring(1);
  Term ts1 = createString(s1);
  Term ts2 = createString(s2);
  {if (true) return cons(ts1,ts2);}
  //CPPPParser nestedParser = createNestedParser(new StringReader(s2),inFname);

    throw new Error("Missing return statement in function");
  }

  final public Token c_comment() throws ParseException {
 Token t;
    jj_consume_token(C_COMMENT_BEGIN);
    t = jj_consume_token(C_COMMENT_END);
   {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token xml_comment() throws ParseException {
Token t;
    jj_consume_token(XML_COMMENT_BEGIN);
    t = jj_consume_token(XML_COMMENT_END);
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  final private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  final private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  final private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  final private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  final private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  final private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  final private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  final private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  final private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  final private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  final private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  final private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  final private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  final private boolean jj_3_12() {
    if (jj_scan_token(1)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) jj_scanpos = xsp;
    if (jj_scan_token(13)) return true;
    xsp = jj_scanpos;
    if (jj_3R_28()) jj_scanpos = xsp;
    if (jj_scan_token(NEWLINE)) return true;
    return false;
  }

  final private boolean jj_3_30() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_scan_token(LESS)) return true;
    return false;
  }

  final private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_24() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_scan_token(1)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) jj_scanpos = xsp;
    if (jj_scan_token(12)) return true;
    xsp = jj_scanpos;
    if (jj_3R_26()) jj_scanpos = xsp;
    if (jj_scan_token(NEWLINE)) return true;
    return false;
  }

  final private boolean jj_3R_13() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_21() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_scan_token(1)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) jj_scanpos = xsp;
    if (jj_scan_token(11)) return true;
    if (jj_3R_5()) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_scan_token(17)) return true;
    return false;
  }

  final private boolean jj_3R_10() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3_29() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_scan_token(1)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) jj_scanpos = xsp;
    if (jj_scan_token(10)) return true;
    xsp = jj_scanpos;
    if (jj_3R_22()) jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_scan_token(8)) return true;
    return false;
  }

  final private boolean jj_3R_16() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(20)) jj_scanpos = xsp;
    if (jj_scan_token(CPP_COMMENT)) return true;
    xsp = jj_scanpos;
    if (jj_3_31()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_7() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_scan_token(12)) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_scan_token(1)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) jj_scanpos = xsp;
    if (jj_scan_token(9)) return true;
    xsp = jj_scanpos;
    if (jj_3R_20()) jj_scanpos = xsp;
    if (jj_3R_8()) return true;
    return false;
  }

  final private boolean jj_3R_14() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_scan_token(13)) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_scan_token(1)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) jj_scanpos = xsp;
    if (jj_scan_token(8)) return true;
    xsp = jj_scanpos;
    if (jj_3R_17()) jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3R_12() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_scan_token(10)) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_scan_token(1)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) jj_scanpos = xsp;
    if (jj_scan_token(7)) return true;
    xsp = jj_scanpos;
    if (jj_3R_15()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(0)) return true;
    }
    return false;
  }

  final private boolean jj_3R_11() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_scan_token(7)) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_scan_token(6)) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_scan_token(1)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_12()) jj_scanpos = xsp;
    if (jj_scan_token(6)) return true;
    xsp = jj_scanpos;
    if (jj_3R_13()) jj_scanpos = xsp;
    if (jj_scan_token(NEWLINE)) return true;
    return false;
  }

  final private boolean jj_3R_9() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_scan_token(5)) return true;
    return false;
  }

  final private boolean jj_3_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(18)) jj_scanpos = xsp;
    if (jj_scan_token(CPP_COMMENT)) return true;
    xsp = jj_scanpos;
    if (jj_3_30()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_scan_token(1)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) jj_scanpos = xsp;
    if (jj_scan_token(5)) return true;
    if (jj_3R_5()) return true;
    return false;
  }

  final private boolean jj_3R_6() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_scan_token(2)) return true;
    return false;
  }

  final private boolean jj_3_28() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_scan_token(1)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_9()) jj_scanpos = xsp;
    if (jj_scan_token(4)) return true;
    xsp = jj_scanpos;
    if (jj_3R_10()) jj_scanpos = xsp;
    if (jj_3R_8()) return true;
    return false;
  }

  final private boolean jj_3R_4() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_scan_token(4)) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_scan_token(3)) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(1)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_6()) jj_scanpos = xsp;
    if (jj_scan_token(3)) return true;
    xsp = jj_scanpos;
    if (jj_3R_7()) jj_scanpos = xsp;
    if (jj_3R_8()) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_scan_token(XML_COMMENT_BEGIN)) return true;
    if (jj_scan_token(XML_COMMENT_END)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(1)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_4()) jj_scanpos = xsp;
    if (jj_scan_token(2)) return true;
    if (jj_3R_5()) return true;
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_scan_token(NN)) return true;
    return false;
  }

  final private boolean jj_3_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(20)) jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_92() {
    if (jj_scan_token(LOGICAL_NOT)) return true;
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_scan_token(BIT_NEGATE)) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_scan_token(C_COMMENT_BEGIN)) return true;
    if (jj_scan_token(C_COMMENT_END)) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    if (jj_scan_token(MOD)) return true;
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_scan_token(DIVIDE)) return true;
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_scan_token(MULTIPLY)) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_scan_token(RIGHT_SHIFT)) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_scan_token(LEFT_SHIFT)) return true;
    return false;
  }

  final private boolean jj_3_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(18)) jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_scan_token(GREATER_EQ)) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_scan_token(ONE_QUOTE)) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_scan_token(LESS_EQ)) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_scan_token(NEQ)) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_scan_token(BIT_AND)) return true;
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_scan_token(BIT_OR)) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_scan_token(WSCONTINUE)) return true;
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_scan_token(LOGICAL_AND)) return true;
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_scan_token(LOGICAL_OR)) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_scan_token(WS)) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_scan_token(16)) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_scan_token(15)) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_scan_token(CHARACTER)) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_scan_token(14)) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_scan_token(GREATER)) return true;
    return false;
  }

  final private boolean jj_3_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(20)) jj_scanpos = xsp;
    if (jj_scan_token(CPP_COMMENT)) return true;
    xsp = jj_scanpos;
    if (jj_3_21()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_scan_token(LESS)) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_scan_token(PUNCT)) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(18)) jj_scanpos = xsp;
    if (jj_scan_token(CPP_COMMENT)) return true;
    xsp = jj_scanpos;
    if (jj_3_20()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) jj_scanpos = xsp;
    if (jj_scan_token(16)) return true;
    xsp = jj_scanpos;
    if (jj_3R_35()) jj_scanpos = xsp;
    if (jj_3R_8()) return true;
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_3R_56()) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_3R_54()) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(20)) jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_3R_51()) return true;
    return false;
  }

  final private boolean jj_3_38() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(18)) jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    if (jj_3R_8()) return true;
    return false;
  }

  final private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_3R_8()) return true;
    return false;
  }

  final private boolean jj_3_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(20)) jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3_40() {
    if (jj_3R_8()) return true;
    if (jj_scan_token(14)) return true;
    return false;
  }

  final private boolean jj_3_39() {
    if (jj_3R_8()) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(18)) jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3_37() {
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_scan_token(CE_INTEGER)) return true;
    return false;
  }

  final private boolean jj_3_31() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    if (jj_3R_5()) return true;
    return false;
  }

  final private boolean jj_3R_26() {
    if (jj_3R_5()) return true;
    return false;
  }

  final private boolean jj_3R_8() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  final private boolean jj_3_36() {
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3R_5() {
    Token xsp;
    if (jj_3_36()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_36()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_22() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_3R_5()) return true;
    if (jj_scan_token(0)) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_3R_8()) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_3R_5()) return true;
    if (jj_scan_token(NEWLINE)) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_scan_token(WSCONTINUE)) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_scan_token(1)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) jj_scanpos = xsp;
    if (jj_scan_token(NEWLINE)) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    if (jj_scan_token(WS)) return true;
    return false;
  }

  final private boolean jj_3R_25() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    if (jj_3R_30()) return true;
    return false;
  }

  public CPPPParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[52];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x140000,0x140000,0x140000,0x140000,0x140000,0x140000,0x140000,0x140000,0x140000,0x140000,0x140000,0x140000,0x140000,0x200001,0x140000,0x140000,0x140000,0x140000,0x140000,0x140000,0x140000,0x140000,0x140000,0x140000,0xffd7f5fc,0x140000,0xffd7f5fc,0x140000,0x200001,0x40000,0x100000,0x40000,0x100000,0x40000,0x100000,0x140000,0x40000,0x100000,0x40000,0x100000,0x140000,0x2,0xffd7f5fe,0xffd7f5fc,0xff01c000,0x235fc,0x2800000,0x140000,0x800000,0x140000,0x140000,0xffd7f5fe,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x30000,0x30000,0x30000,0x30000,0x30000,0x30000,0x30000,0x30000,0x30000,0x30000,0x30000,0x30000,0x30000,0x0,0x30000,0x30000,0x30000,0x30000,0x30000,0x30000,0x30000,0x30000,0x30000,0x30000,0x7ffff,0x30000,0x7ffff,0x30000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7ffff,0x7ffff,0x1fff,0x0,0x4000,0x30000,0x0,0x30000,0x30000,0x7ffff,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[41];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public CPPPParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public CPPPParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CPPPParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public CPPPParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new CPPPParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public CPPPParser(CPPPParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(CPPPParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[57];
    for (int i = 0; i < 57; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 52; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 57; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 41; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
