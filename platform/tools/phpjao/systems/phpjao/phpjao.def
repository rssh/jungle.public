
domain(phpjao,

  system(phpjao, default, 
   ruleset(

     import(general, logical_and),
     import(general, apply),
     import(String, concat),

     JavaEntity(
       ClassOrInterfaceModel($modifiers,
                             interface,
                             $name, $typeParameters,
                             $extendsList,$implementsList,
                             $body,$context) 
                 ) -> HtmlBlocks(
                        HtmlBlock("<!-- interface "),
                        HtmlBlock($name),
                        HtmlBlock("-->")
                      ),

     JavaEntity(
       ClassOrInterfaceModel($modifiers,class,$name,$typeParameters,
                             $extendsList,$implementsList,$body,$context) 
             ) -> 
              SPhpPage(SHtmlBlocks([]),[
               ClassDeclaration(translateClassModifiers($modifiers),
                                $name,
                                translateExtendsList($extendsList),
                                translateImplementsList($implementsList),
                                JavaEntityMembers($body,$context)
                               ),
                               registerPHPJaoType(
                                  $context.getTypeModel().getErasedFullName(),
                                  $name
                               ),
                               EmbeddedHtml([],[])]),


       translateClassModifiers(Modifiers($iv, $annotations)) 
             -> $n [ getClassModifiersFromInt($iv,$n) ],

       translateModifiers([]) -> [],
       translateModifiers([$x:$y]) -> cons(translateModifier($x),
                                           translateModifiers($y)),
       translateModifiers($x) -> $x,

       translateModifier($x) -> $x,

       translateExtendsList([]) -> [],

      # translateExtendsList([$x:$y]) -> cons(translateClassName($x),
      #                                       translateExtendsList($y)),
      # extendsList can constains only one argument
       translateExtendsList([$x:$y]) -> translateClassName($x),

       translateClassName(TypeRef($name,$ctx)) -> translateClassName($name),

       translateClassName([$name]) -> $name,

       translateImplementsList([]) -> [],
       translateImplementsList([$x:$y])
              [ erasedInPhp($x) ] -> translateImplementsList($y)
                                 !-> cons(translateClassName($x),
                                          translateImplementsList($y)),

       erasedInPhp($x) -> true,

       JavaEntityMembers(ClassOrInterfaceBody($x),$ctx) -> 
                 SClassMembers(cons(
                   generateClassHint($ctx.getTypeModel().getErasedFullName()), 
                   JavaEntityMembers($x))
                 ),
                                                         
       JavaEntityMembers([]) -> [],
       JavaEntityMembers([$x:$y]) 
          [isPropertyEntityMember($x)] -> cons(translateEntityMember($x),
                                               JavaEntityMembers($y))
         |
          [isPrimitiveConstantMember($x)] 
                                  -> 
                                     cons(translatePrimitiveConstant($x),
                                          JavaEntityMembers($y))
                                 !->
                                          JavaEntityMembers($y),

      
      isPropertyEntityMember(
        MethodModel($modifiers,$typeParameters,$resultType,
                    $name,$formalParameters,$throws,
                    $block,$context)) 
            ->  isGetterName($name) && notTransient($modifiers) ,

      isPropertyEntityMember($x) -> false,

      isGetterName(Identifier($x)) -> isGetterName($x),
      isGetterName($x) [ isString($x) && isGetterString($x) ] -> true
                      !-> false,
       
      notTransient(Modifiers($iv,$annotations)) -> notTransient($annotations),

      notTransient([$x:$y]) -> notTransient($x) && notTransient($y),
      notTransient([]) -> true,
      notTransient(AnnotationInstanceModel($v,$ai)) 
         [ $ai.getAnnotationModel().getName().equals(
                          "javax.persistence.Transient") ] -> false
                                                          !-> true,

      translateEntityMember(
        MethodModel($modifiers,$typeParameters,TypeRef($typeName,$resultType),
                    $name,$formalParameters,$throws,
                    $block,$context)) 
            ->  insertMembers(
                   MemberVariablesDeclaration(
                   attributes([public]), 
                   [VariableDecl(nameFromGetter($name))], 
                                          EndOfStatement()
                   ),
                   MemberConstantDeclaration(
                     [], concatToIdentifier(nameFromGetter($name),"_TYPE"),
                     SingleStringLiteral($resultType.getErasedFullName()),
                     EndOfStatement()
                   )),

      cons(insertMembers($x,$y),$z) -> cons($x,cons($y,$z)),
      
      isPrimitiveConstantMember(
          MemberVariableModel($modifiers,TypeRef($t,$mt), 
                              $name, $initializer,$model)
      ) 
        [ $model.isConstant() 
          && 
           ($mt.isPrimitiveType() 
            || $mt.getFullName().equals("java.lang.String"))
        ]  -> true
          !-> false,

      isPrimitiveConstantMember($x) -> false,

      translatePrimitiveConstant(
          MemberVariableModel($modifiers,TypeRef($t,$mt), 
                              $name, $initializer,$model)
      )
         -> MemberConstantDeclaration([],
                                   $name,
                                   translateConstantExpression($initializer),
                                   EndOfStatement()),

      translateConstantExpression(IntegerLiteral($x)) -> $x,

      translateConstantExpression(StringLiteral($x)) -> SingleStringLiteral($x),

      translateConstantExpression($x) -> $x,

      nameFromGetter(Identifier($s)) -> Identifier($n)
                                         [ getNameFromGetterString($s,$n) ],

      generateClassHint($name) -> MemberConstantDeclaration([],
                                          Identifier("javaClass"),
                                          SingleStringLiteral($name),
                                          EndOfStatement()),

      concatToIdentifier(Identifier($x),$y) -> Identifier(concat($x,$y)),

      registerPHPJaoType($fullname,Identifier($phpName)) ->
              ExpressionStatement(
                ScopeResolution(Identifier("PHPJAO"),
                   MethodCall(Identifier("registerType"),
                     SArgumentExpressionList([SingleStringLiteral($fullname),
                                              SingleStringLiteral($phpName)]))
                ),
                EndOfStatement()
              ), 


      JavaEntity(
        EnumModel($modifiers,$name,$implements,
                  $contstants,$methods,$model) 
                 ) -> HtmlBlocks(
                        HtmlBlock("\n<!-- enum "),
                        HtmlBlock($name),
                        HtmlBlock("-->\n")
                      ),
           

      p($x) -> $x [println($x)],       

    a($x) -> b($x)
   ),
  FirstTop)

);



