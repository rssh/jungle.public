 /*
  *01  L: [S] (enabled, IF (true) X) -> L+1: [S][enabled, IF (true), L+1 ] (enabled, X)
  *02  L: [S][enabled, IF,true, L] (ELSIF $x X)  -> L: [S][enabled,IF,true,L][disabled, ELSIF, $x, L] (disabled, X)
  *03  L: [S][enabled, IF,true, L] [disabled, ELIF, $x,L] (ELSIF $y X) -> L: [S][enabled,IF,true,L][disabled, ELSIF, $x, L] (disabled, X)
  *04  L: [S][enabled, IF,true, L] [disabled, ELIF, $x,L] (ELSE X) -> L: [enabled, IF, true, L][disabled ELSE, L] (disabled, X)
  *05  L: [S][enabled, IF,true, L] [disabled, ELSE, L](ENDIF X)  -> L-1: [S] (enabled, X)
  *06  L: [s][enabled, IF,true, L] [disabled, ELIF, $x, L] ( IF X ) -> L+1: [S][enabled,IF,true,L][disabled,ELIF,$x,L][disabled,IF,$x,L+1]
  *07  L: [S][enabled, IF,true, L] [disabled, ELSE, L](ELSE X) -> ERROR "ENDIF after ELSE expected"
  *08  L: [S][enabled, IF,true, L] [disabled, ELIF, L](ENDIF X) -> L-1: [S] (X)
  *09  L: [S][enabled, IF,true, L] (ELSE X) -> L:[S][enabled,IF,true,L][disabled, ELSE, L](X)
  *10  L: [S][enabled, IF,true, L] (IF (true) X) -> *01
  *11  L: [S][enabled, IF,true, L] (ENDIF X) -> L-1:[S](X)
  *11  L: [S](enabled, IF (false) X) -> L+1: [S][enable,NONE][disable,IF,L+1](X)
  *12  L: [S][enable,NONE,L-1][disable,IF,L](IF ($x) X) -> [S][enable,NONE,L-1][disable,IF,L][disable,IF,L+1](disabled,X)
  *13  L: [S][enable,NONE,L-1][disable,IF,L](ELIF (true) X) ->[S][eanble,NONE,L-1][disable,IF,L][enable,ELIF,L](X)
  *14  L: [S][enable,NONE,L-1][disable,IF,L][enable,ELIF,L](ELIF ($x) X) -> L:[S][enable,NONE,L-1][disable,IF,L][enable,ELIF,L][disable,ELIF,L](disabled,X) 
  *15  L: [S][enable,NONE,L-1][disable,IF,L][enable,ELIF,L][disable,ELIF,L](ELIF, ($x), X) -> [enable,NONE,L-1][disable,IF,L][enable,ELIF,L][disable,ELIF,L] X
  *15  L: [S][enable,NONE,L-1][disable,IF,L][enable,ELIF,L][disable,ELIF,L](ELSE X) ->[S][enable,NONE,L-1][disable,IF,L][disable,ELSE,L](disable,X)
  *16  L: [S][enable,NONE,L-1][disable,IF,L][enable,ELIF,L][disable,ELIF,L](IF X) -> *26
  *17  L: [S][enable,NONE,L-1][disable,IF,L][enable,ELIF,L][disable,ELIF,L](ENDIF X) -> L-1:[S](enable,X)
  *18  L: [S][enable,NONE,L-1][disable,IF,L][enable,ELIF,L](ELSE X)->L:[S][enable,NONE,L-1][disable,IF,L][disable,ELSE,L]X
  *19  L: [S][enable,NONE,L-1][disable,IF,L][enable,ELIF,L](ENDIF)->L:[S](enable,X)
  *20  L: [S][enable,NONE,L-1][disable,IF,L](ELIF (false) X) -> [S][enable,NONE,L-1][disable,IF,L] (disable, X)
  *21  L: [S][enable,NONE,L-1][disable,IF,L](ELSE X) -> [S][enable,NONE,L-1][disable,IF,L][enable,ELSE,L](enable,X)
  *22  L: [S][enable,NONE,L-1][disable,IF,L][enable,ELSE,L](IF X)->*01
  *23  L: [S][enable,NONE,L-1][disable,IF,L][enable,ELSE,L](ELSIF X) -> ERROR
  *23  L: [S][enable,NONE,L-1][disable,IF,L][enable,ELSE,L](ELSE X) -> ERROR
  *24  L: [S][enable,NONE,L-1][disable,IF,L][enable,ELSE,L](ENDIF X) -> [S](enable,X)
  *25  L: [S][enable,NONE,L-1][disable,IF,L](ENDIF X) -> [S](enable,X)
  *26  L: [S][disabled,*,L](IF, ($x), X) -> L+1:[S][disabled,*,L][disabled,IF,L+1]
  *27  L: [S][disabled,*,L-1][disabled,IF,L](IF X)->*26
  *28  L: [S][disabled,*,L-1][disabled,IF,L](ELIF $x X)->[S][disabled,*,L-1][disabled,IF,L]
  *29  L: [S][disabled,*,L-1][disabled,IF,L](ELSE X) -> [S][disabled,*,L-1][disabled,IF,L][disabled,ELSE,L](disabled,X)
  *30  L: [S][disabled,*,L-1][disabled,IF,L][disabled,ELSE,L](IF X) -> *26
  *31  L: [S][disabled,*,L-1][disabled,IF,L][disabled,ELSE,L](ELIF X) -> "ERROR"
  *32  L: [S][disabled,*,L-1][disabled,IF,L][disabled,ELSE,L](ELSE X) -> "ERROR"
  *33  L: [S][disabled,*,L-1][disabled,IF,L][disabled,ELSE,L](ENDIF X) -> L-1:[S][disabled,*,L-1](disable,X)
  *34  L: [S][disabled,*,L-1][disabled,IF,L](ENDIF X) -> L-1:[S][disabled,*,L-1](disable,X)
  *
  **/

IF:
 /*
  *01  L: [S] (enabled, IF (true) X) -> L+1: [S][enabled, IF (true), L+1 ] (enabled, X)
  *06  L: [s][enabled, IF,true, L] [disabled, ELIF, $x, L] ( IF X ) -> L+1: [S][enabled,IF,true,L][disabled,ELIF,$x,L][disabled,IF,$x,L+1]
  *10  L: [S][enabled, IF,true, L] (IF (true) X) -> *01
  *11  L: [S](enabled, IF (false) X) -> L+1: [S][enable,NONE][disable,IF,L+1](X)
  *12  L: [S][enable,NONE,L-1][disable,IF,L](IF ($x) X) -> [S][enable,NONE,L-1][disable,IF,L][disable,IF,L+1](disabled,X)
  *16  L: [S][enable,NONE,L-1][disable,IF,L][enable,ELIF,L][disable,ELIF,L](IF X) -> *26
  *22  L: [S][enable,NONE,L-1][disable,IF,L][enable,ELSE,L](IF X)->*01
  *26  L: [S][disabled,*,L](IF, ($x), X) -> L+1:[S][disabled,*,L][disabled,IF,L+1]
  *27  L: [S][disabled,*,L-1][disabled,IF,L](IF X)->*26
  *30  L: [S][disabled,*,L-1][disabled,IF,L][disabled,ELSE,L](IF X) -> *26
  *
  * =
  * L: [S][enabled,*,L](IF(true), X) -> L+1: [S][enabled,*,L][enabled, IF, L+1](X)
  * L: [S][enabled,*,L](IF(false),X) -> L+1: [S][enabled,*,L][disabled,IF,L+1](X)
  * L: [S][disabled,*,L](IF $x X) -> L+1:[S][disabled,*,L][disabled,IF,L+1](X)
  **/

ELIF:
  *02  L: [S][enabled, IF,true, L] (ELIF $x X)  -> L: [S][enabled,IF,true,L][disabled, ELSIF, $x, L] (disabled, X)
  *03  L: [S][enabled, IF,true, L] [disabled, ELIF, L] (ELIF $y X) -> L: [S][enabled,IF,true,L][disabled, ELSIF, $x, L] (disabled, X)
  *13  L: [S][enable,NONE,L-1][disable,IF,L](ELIF (true) X) ->[S][eanble,NONE,L-1][disable,IF,L][enable,ELIF,L](X)
  *14  L: [S][enable,NONE,L-1][disable,IF,L][enable,ELIF,L](ELIF ($x) X) -> L:[S][enable,NONE,L-1][disable,IF,L][enable,ELIF,L][disable,ELIF,L](disabled,X) 
  *15  L: [S][enable,NONE,L-1][disable,IF,L][enable,ELIF,L][disable,ELIF,L](ELIF, ($x), X) -> [enable,NONE,L-1][disable,IF,L][enable,ELIF,L][disable,ELIF,L] X
  *20  L: [S][enable,NONE,L-1][disable,IF,L](ELIF (false) X) -> [S][enable,NONE,L-1][disable,IF,L] (disable, X)
  *23  L: [S][enable,NONE,L-1][disable,IF,L][enable,ELSE,L](ELIF X) -> ERROR
  *28  L: [S][disabled,*,L-1][disabled,IF,L](ELIF $x X)->[S][disabled,*,L-1][disabled,IF,L]
  *31  L: [S][disabled,*,L-1][disabled,IF,L][disabled,ELSE,L](ELIF X) -> "ERROR"

ELSE:
 /*
  *04  L: [S][enabled, IF,true, L] [disabled, ELIF, L] (ELSE X) -> L: [enabled, IF, true, L][disabled ELSE, L] (disabled, X)
  *07  L: [S][enabled, IF,true, L] [disabled, ELSE, L](ELSE X) -> ERROR "ENDIF after ELSE expected"
  *09  L: [S][enabled, IF,true, L] (ELSE X) -> L:[S][enabled,IF,true,L][disabled, ELSE, L](X)
  *15  L: [S][enable,NONE,L-1][disable,IF,L][enable,ELIF,L][disabled,ELIF,L](ELSE X) ->[S][enable,NONE,L-1][disable,IF,L][disable,ELSE,L](disable,X)
  *18  L: [S][enable,NONE,L-1][disable,IF,L][enable,ELIF,L](ELSE X)->L:[S][enable,NONE,L-1][disable,IF,L][disable,ELSE,L]X
  *21  L: [S][enable,NONE,L-1][disable,IF,L](ELSE X) -> [S][enable,NONE,L-1][disable,IF,L][enable,ELSE,L](enable,X)
  *23  L: [S][enable,NONE,L-1][disable,IF,L][enable,ELSE,L](ELSE X) -> ERROR
  *29  L: [S][disabled,*,L-1][disabled,IF,L](ELSE X) -> [S][disabled,*,L-1][disabled,IF,L][disabled,ELSE,L](disabled,X)
  *32  L: [S][disabled,*,L-1][disabled,IF,L][disabled,ELSE,L](ELSE X) -> "ERROR"
  *
  **/
