
domain(phpjao,

  system(phpjao, default, 
   ruleset(

     import(general, logical_and),
     import(general, apply),
     import(String, concat),

     JavaEntity(
       ClassOrInterfaceModel($modifiers,
                             interface,
                             $name, $typeParameters,
                             $extendsList,$implementsList,
                             $body,$context) 
                 ) -> Invisible(HtmlBlocks(
                        HtmlBlock("<!-- interface "),
                        HtmlBlock($name),
                        HtmlBlock("-->")
                      )),

     JavaEntity(
       ClassOrInterfaceModel($modifiers,class,$name,$typeParameters,
                             $extendsList,$implementsList,$body,$context) 
             ) -> 
              let (
                $classDescriptionName <- concatToIdentifier($name,
                                                "PHPJAOClassDescription")
              )
              SPhpPage(SHtmlBlocks([]),[
               ClassDeclaration([],
                    $classDescriptionName,
                    generateClassDescriptionParent($context),
                    [],
                    ClassDescriptionMembers($name,$body,$context)
               ),
               ClassDeclaration(translateClassModifiers($modifiers),
                                $name,
                                translateExtendsList($extendsList),
                                translateImplementsList($implementsList),
                                JavaEntityMembers($body,$context)
                               ),
                               assignClassDescription($name,
                                        $classDescriptionName),
                               registerPHPJaoType(
                                  $context.getTypeModel().getErasedFullName(),
                                  $name,
                                  $classDescriptionName
                               ),
                               EmbeddedHtml([],[])]),


       translateClassModifiers(Modifiers($iv, $annotations)) 
             -> $n [ getClassModifiersFromInt($iv,$n) ],

       translateModifiers([]) -> [],
       translateModifiers([$x:$y]) -> cons(translateModifier($x),
                                           translateModifiers($y)),
       translateModifiers($x) -> $x,

       translateModifier($x) -> $x,

       translateExtendsList([]) -> Identifier("PHPJAOPOJOBase"),

      # extendsList can constains only one argument
       translateExtendsList([$x:$y]) -> translateClassName($x),

       translateClassName(TypeRef($name,$ctx)) -> translateClassName($name),

       translateClassName([$name]) -> $name,

       translateImplementsList([]) -> [],
       translateImplementsList([$x:$y])
              [ erasedInPhp($x) ] -> translateImplementsList($y)
                                 !-> cons(translateClassName($x),
                                          translateImplementsList($y)),

       erasedInPhp($x) -> true,

       JavaEntityMembers(ClassOrInterfaceBody($x),$ctx) -> 
                 SClassMembers(
                   append(
                     generateDescriptionAcceptor(),
                     JavaEntityMembers($x)
                   )
                 ),
                                                         
       JavaEntityMembers([]) -> [],
       JavaEntityMembers([$x:$y]) 
          [isPropertyEntityMember($x)] -> cons(translateEntityMember($x),
                                               JavaEntityMembers($y))
         |
          [isPrimitiveConstantMember($x)] 
                                  -> 
                                     cons(translatePrimitiveConstant($x),
                                          JavaEntityMembers($y))
                                 !->
                                          JavaEntityMembers($y),

      
      isPropertyEntityMember(
        MethodModel($modifiers,$typeParameters,$resultType,
                    $name,$formalParameters,$throws,
                    $block,$context)) 
            ->  isGetterName($name) && notTransient($modifiers) ,

      isPropertyEntityMember($x) -> false,

      isGetterName(Identifier($x)) -> isGetterName($x),
      isGetterName($x) [ isString($x) && isGetterString($x) ] -> true
                      !-> false,
       
      notTransient(Modifiers($iv,$annotations)) -> notTransient($annotations),

      notTransient([$x:$y]) -> notTransient($x) && notTransient($y),
      notTransient([]) -> true,
      notTransient(AnnotationInstanceModel($v,$ai)) 
         [ $ai.getAnnotationModel().getFullName() ==
                             "javax.persistence.Transient" ] -> false 
                                                            !-> true ,

      translateEntityMember(
        MethodModel($modifiers,$typeParameters,TypeRef($typeName,$resultType),
                    $name,$formalParameters,$throws,
                    $block,$context)) 
            ->  
                   MemberVariablesDeclaration(
                   attributes([public]), 
                   [VariableDecl(nameFromGetter($name))], 
                                          EndOfStatement()
                   ),

      
      isPrimitiveConstantMember(
          MemberVariableModel($modifiers,TypeRef($t,$mt), 
                              $name, $initializer,$model)
      ) 
        [ $model.isConstant() 
          && 
           ($mt.isPrimitiveType() 
            || $mt.getFullName().equals("java.lang.String"))
        ]  -> true
          !-> false,

      isPrimitiveConstantMember($x) -> false,

      translatePrimitiveConstant(
          MemberVariableModel($modifiers,TypeRef($t,$mt), 
                              $name, $initializer,$model)
      )
         -> MemberConstantDeclaration([],
                                   $name,
                                   translateConstantExpression($initializer),
                                   EndOfStatement()),

      translateConstantExpression(IntegerLiteral($x)) -> $x,

      translateConstantExpression(StringLiteral($x)) -> SingleStringLiteral($x),

      translateConstantExpression($x) -> $x,

      nameFromGetter(Identifier($s)) -> Identifier($n)
                                         [ getNameFromGetterString($s,$n) ],

      concatToIdentifier(Identifier($x),$y) -> Identifier(concat($x,$y)),

      assignClassDescription($name,$descrName) ->
        ExpressionStatement(
          AssignmentExpression(
           ScopeResolution($name,Variable(1,"phpjaoClassDescription")),
           AssignmentOperator("="),
           AllocationExpression($descrName,SArgumentExpressionList([]))
          ),
          EndOfStatement()
        ),

      registerPHPJaoType($fullname,$name,$descrName) ->
              ExpressionStatement(
                ScopeResolution(Identifier("PHPJAO"),
                   MethodCall(Identifier("registerType"),
                     SArgumentExpressionList([
                       SingleStringLiteral($fullname),
                       ScopeResolution($name,Variable(1,"phpjaoClassDescription"))
                     ]))
                ),
                EndOfStatement()
              ), 


       ClassDescriptionMembers($name,ClassOrInterfaceBody($x),$ctx) -> 
                 SClassMembers([
                   generateClassDescriptionConstructor($ctx,$x), 
                   generateClassDescriptionInstanceConstructor($name)
                 ]),
                                                         
       JavaEntityMembers([]) -> [],
       JavaEntityMembers([$x:$y]) 
          [isPropertyEntityMember($x)] -> cons(translateEntityMember($x),
                                               JavaEntityMembers($y))
         |
          [isPrimitiveConstantMember($x)] 
                                  -> 
                                     cons(translatePrimitiveConstant($x),
                                          JavaEntityMembers($y))
                                 !->
                                          JavaEntityMembers($y),

      generateClassDescriptionConstructor($ctx,$members) -> MemberDeclaration(
        MemberFunctionDeclaration(
          SMemberFunctionAttributes([public]),[],
          Identifier("__construct"),[],
          SCompoundStatement([
            ExpressionStatement(
             ScopeResolution(
              Identifier("parent"),
              MethodCall(Identifier("__construct"),SArgumentExpressionList([]))
             ), 
             EndOfStatement()
            ),
            ExpressionStatement(
             AssignmentExpression(
              MemberSelector(Variable(1,"this"),Identifier("javaClass")),
              AssignmentOperator("="),
              SingleStringLiteral($ctx.getTypeModel().getErasedFullName())
             ),
             EndOfStatement()
            ),
            ExpressionStatement(
             AssignmentExpression(
              MemberSelector(Variable(1,"this"),Identifier("phpClass")),
              AssignmentOperator("="),
              SingleStringLiteral($ctx.getTypeModel().getErasedName())
             ),
             EndOfStatement()
            ),
            ExpressionStatement(
             AssignmentExpression(
              MemberSelector(Variable(1,"this"),Identifier("typesOfFields")),
              AssignmentOperator("="),
              generateFieldDescriptionArray($ctx,$members)
             ),
             EndOfStatement()
            )
          ])
        )
      ),

      generateFieldDescriptionArray($ctx,$members) 
          [$ctx.getTypeModel().getSuperClass().getErasedFullName()
                                                    !="java.lang.Object"] 
              ->  AdditiveExpression(
                   MemberSelector(Variable(1,"this"),
                    Identifier("typesOfFields")         
                   ),
                   "+",
                   SArray(generateFieldDescriptionPairs($members))
                  )
             !->
                   SArray(generateFieldDescriptionPairs($members)),


      append(cons($x,$y),$z) -> cons($x,append($y,$z)),
 
      generateFieldDescriptionPairs([]) -> [],
      generateFieldDescriptionPairs([$x:$y])  
          [isPropertyEntityMember($x)] -> cons(
                          generateFieldDescriptionPair($x),
                          generateFieldDescriptionPairs($y)
                                               ) 
                                 !->
                          generateFieldDescriptionPairs($y),
      
      generateFieldDescriptionPair(  
        MethodModel($modifiers,$typeParameters,TypeRef($typeName,$resultType),
                    $name,$formalParameters,$throws,
                    $block,$context)) 
            -> ArrayKeyValuePair(
                  SingleStringLiteral(unIdentifier(nameFromGetter($name))), 
                  SingleStringLiteral($resultType.getErasedFullName())
               ),
  
      unIdentifier(Identifier($x)) -> $x,

      generateClassDescriptionInstanceConstructor($name)->
         MemberDeclaration(
          MemberFunctionDeclaration(
            SMemberFunctionAttributes([public]),NIL,
            Identifier("newInstance"),NIL,
            SCompoundStatement([
              ReturnStatement(AllocationExpression($name,
                                    SArgumentExpressionList([])),
              EndOfStatement()
            )
            ])
          )
         ),
      
      generateDescriptionAcceptor()-> cons(
        MemberDeclaration(MemberVariablesDeclaration(
          SMemberVariableAttributes([static]),
          [VariableDecl(Identifier("phpjaoClassDescription"))],
          EndOfStatement()
        )),
        MemberDeclaration(MemberFunctionDeclaration(
          SMemberFunctionAttributes([public]),[],
          Identifier("getPHPJAOClassDescription"),[],
          SCompoundStatement([
              ReturnStatement(
               ScopeResolution(Identifier("self"),
                               Variable(1,"phpjaoClassDescription"))
               ,
               EndOfStatement())
          ])
        ))
      ),

      generateClassDescriptionParent($ctx) 
          [$ctx.getTypeModel().getSuperClass().getErasedFullName()
                                                    !="java.lang.Object"] 
              ->
                 concatToIdentifier(
                     Identifier(
                      $ctx.getTypeModel().getSuperClass().getErasedName()
                     ),
                     "PHPJAOClassDescription"
                 )
             !->
                    Identifier("PHPJAOClassDescription"),

      #JavaEntity(
      #  EnumModel($modifiers,$name,$implements,
      #            $contstants,$methods,$model) 
      #           ) -> HtmlBlocks(
      #                  HtmlBlock("\n<!-- enum "),
      #                  HtmlBlock($name),
      #                  HtmlBlock("-->\n")
      #                ),
           
      #JavaEntity(
      #  EnumModel($modifiers,$name,$implements,
      #            $contstants,$methods,$contexts) 
      #           ) -> 
      #        SPhpPage(SHtmlBlocks([]),[
      #         ClassDeclaration(translateClassModifiers($modifiers),
      #                          $name,
      #                          translateImplementsList($implementsList),
      #                          cons(
      #                            translateEnumConstants($constants),
      #                            JavaEntityMembers($methods,$context)
      #                          )
      #                         ),
      #                         registerPHPJaoType(
      #                            $context.getTypeModel().getErasedFullName(),
      #                            $name
      #                         ),
      #                         EmbeddedHtml([],[])]),

           

      p($x) -> $x [println($x)],       

    a($x) -> b($x)
   ),
  FirstTop)

);



