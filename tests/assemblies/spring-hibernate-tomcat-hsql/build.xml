<?xml version="1.0"?>

<project name="test-spring-hibernate-tomcat" default="assemble" basedir="."
 xmlns:ivy='antlib:fr.jayasoft.ivy.ant'
>

    <property file="build.properties" />
    <import file="build-ivy.xml" />

    <property name="lib.dir" value="lib" />
    <property name="compile.lib.dir" value="lib.compileonly" />
    <property name="tomcat.lib.dir" value="lib.common.tomcat" />
    <property name="dist.dir" value="dist" />
    <property name="war.dir" value="${dist.dir}/war" />
    
<!-- directories -->    
    <path id="core.path">
       <fileset dir="${lib.dir}" includes="**/*.jar" />
    </path>

    <path id="compile.path">
     <path refid="core.path" />
     <pathelement location="${compile.lib.dir}/javaee-api-5.0-1.jar"/>
    </path>


<!-- targets -->
    <target name="prepare">
        <mkdir dir="${dist.dir}"/>
        <mkdir dir="${war.dir}"/>
        <mkdir dir="${lib.dir}"/>
        <mkdir dir="${compile.lib.dir}"/>
        <mkdir dir="${tomcat.lib.dir}"/>
    </target>
    
    <target name="clean">
     <delete>
      <fileset dir="classes" includes="**/*.class" />
     </delete>
    </target>
 
    <target name="assemble" depends="build-war">
    </target>

    <target name="pre-build">
      <echo message="before build ____PROJECT test-spring-hibernate-tomcat____________"/>
    </target>

    <target name="post-build">
      <echo message="after  build ____PROJECT test-spring-hibernate-tomcat____________"/>
    </target>

    <target name="build" depends="retrieve-libs, retrieve-compile-libs, pre-build" >
      <javac  srcdir="src" includes="**/*.java" deprecation="on"
              debug="on" 
              destdir="classes"
              >
        <classpath refid="compile.path" />
      </javac>  
    </target>
  
    <target name="build-gwt" depends="retrieve-libs, retrieve-compile-libs" >
      <available property="gwt.js.generated" file="gwt-ui/www" />
      <antcall target="gwt-js-compile" />
    </target>

    <target name="gwt-js-compile" unless="gwt.js.generated"  >
      <ant dir="gwt-ui" antfile="ui.ant.xml" target="js-compile-new" />
    </target>


    <target name="build-persistence" depends="retrieve-libs">
      <loadfile property="jungle.appregistry.classes" 
                srcFile="lib/jungle.appregistry.persistence.xml-${jungle.appregistry.version}.part" />
      <loadfile property="jungle.configuration.classes" 
                srcFile="lib/jungle.configuration.persistence.xml-${jungle.configuration.version}.part" />
      <copy file="etc/META-INF/persistence.xml.in"
            tofile="etc/META-INF/persistence.xml"
            overwrite="true"
      >
       <filterset>
         <filter token="DATA_SOURCE" value="DS" />
         <filter token="APPREGISTRY_ORM_CLASSES" 
                 value="${jungle.appregistry.classes}" />
         <filter token="CONFIGURATION_ORM_CLASSES" 
                 value="${jungle.configuration.classes}" />
       </filterset>
      </copy>
      <copy file="etc/WEB-INF/applicationContext.xml.in"
            tofile="etc/WEB-INF/applicationContext.xml"
            overwrite="true"
      >
       <filterset>
         <filter token="DATA_SOURCE" value="DS" />
         <filter token="JDBC_DRIVER" value="${jdbc.driver}" />
         <filter token="JDBC_URL" value="${jdbc.url}" />
         <filter token="JDBC_LOGIN" value="${jdbc.login}" />
         <filter token="JDBC_PASSWORD" value="${jdbc.password}" />
         <filter token="DB_FILE" value="${db.file}" />
       </filterset>
      </copy>
    </target>

    <target name="build-sql" depends="retrieve-sql">
      <!-- <move todir="sql" overwrite="true"> 
        <fileset dir="lib" includes="*.sql" />
      </move> -->
    </target>

    <target name="build-war" depends="prepare, build, build-persistence, 
                                      build-gwt, post-build" >
        <war destfile="${war.dir}/jungle.tomcat.sh-test.war" 
                webxml="etc/WEB-INF/web.xml"  
                index="true">
            <classes  dir="classes" includes="**/*.class,**/*.xml,**/*.properties" />
            <classes  dir="etc" >
              <include name="META-INF/persistence.xml" />
              <include name="logging.properties" />
            </classes>

<!--
            <fileset  dir="${resources-web.dir}" />
            <fileset  dir="${platform-web-resources.dir}" />
          -->
<!--
            <fileset  dir="web.groovy" />
-->
            <fileset  dir="gwt-ui/www/ua.gradsoft.jungle.testapp.GwtUI/" />


            <webinf   dir="etc/WEB-INF" includes="**/*.xml" />
            <metainf  dir="etc/META-INF" includes="context.xml" />
            <lib  dir="lib" includes="**/*.jar" />    
        </war>
    </target>

    <!--        depends="build-war -->
    <target name="deploy" depends="retrieve-tomcat-libs,check-tomcat-home"
                          if="tomcat.home.is.set">
      <echo message="tomcat.home is set to ${tomcat.home}" />
      <copy file="lib.common.tomcat/spring-tomcat-weaver-2.5.6.jar" 
            todir="${tomcat.home}/lib" />
      <copy file="${war.dir}/jungle.tomcat.sh-test.war" 
            todir="${tomcat.home}/webapps" 
            overwrite="true" />
      <echo message="please, restart tomcat" />
    </target>

    <target name="undeploy">
      <delete file="${tomcat.home}/webapps/jungle.tomcat.sh-test.war" />
    </target>
    
    <target name="check-tomcat-home"> 
      <condition property="tomcat.home.is.set">
         <isset property="tomcat.home" />
      </condition>
    </target>

    <target name="create-db" depends="build-sql" >
      <antcall target="create-db.only" />
    </target>

    <target name="create-db.only">
     <sql driver="${jdbc.driver}" url="${jdbc.url}" 
          userid="${jdbc.login}"  password="${jdbc.password}" 
          classpathref="core.path"  >
       <fileset dir="sql"
         includes="create_cluster_keys_hsql-*.sql" />
       <fileset dir="sql"
         includes="create_appregistry_hsql-*.sql" />
       <fileset dir="sql"
         includes="create_configuration_hsql-*.sql" />
     </sql>
    </target>

    <target name="drop-db" depends="build-sql" >
     <sql driver="${jdbc.driver}" url="${jdbc.url}" 
          userid="${jdbc.login}"  password="${jdbc.password}" 
          classpathref="core.path"  >
       <fileset dir="sql"
         includes="drop_configuration_hsql-*.sql" />
       <fileset dir="sql"
         includes="drop_appregistry_hsql-*.sql" />
       <fileset dir="sql"
         includes="drop_cluster_keys_hsql-*.sql" />
     </sql>
    </target>
    
    <target name="init-db" >
     <sql driver="${jdbc.driver}" url="${jdbc.url}" 
          userid="${jdbc.login}"  password="${jdbc.password}" 
          classpathref="core.path"  >
       <fileset dir="sql"
         includes="init_configuration_hsql.sql" />
     </sql>
    </target>

    <target name="clean-db" >
     <sql driver="${jdbc.driver}" url="${jdbc.url}" 
          userid="${jdbc.login}"  password="${jdbc.password}" 
          classpathref="core.path"  >
       <fileset dir="sql"
         includes="clean_configuration_hsql.sql" />
     </sql>
    </target>

    

</project>
